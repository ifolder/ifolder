AC_INIT(src/NautilusExtension.cs)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(ifolder-nautilus, 0.8)
VERSION=0.1.0
AM_MAINTAINER_MODE

#
# Check for a valid C# compiler
#
AC_CHECK_PROG(CSC, mcs, mcs)
test -z "$CSC" && AC_MSG_ERROR([no C Sharp compiler: mcs not found in \$PATH])

#
# We add $prefix to PKG_CONFIG_PATH so pkg-config will find any other
# packages 'make install'-ed to the same prefix.
#
# The default value of $prefix is not set until later in the script.
# We set the default here, if needed.
#
#echo prefix=${prefix}
CONFIGURED_PREFIX="${prefix}"
test -z "$CONFIGURED_PREFIX" -o "$CONFIGURED_PREFIX" = "NONE" && CONFIGURED_PREFIX=$ac_default_prefix
echo CONFIGURED_PREFIX=$CONFIGURED_PREFIX
#echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH
if test -z "$PKG_CONFIG_PATH"; then
    export PKG_CONFIG_PATH="$CONFIGURED_PREFIX/lib/pkgconfig"
else
    export PKG_CONFIG_PATH="$CONFIGURED_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
fi
echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH
AC_SUBST(PKG_CONFIG_PATH)

#
# Configure C# compiler settings
#
CSC_EXEFLAG=/target:exe
CSC_LIBFLAG=/target:library
CSC_WINEXEFLAG=/target:winexe
CSCFLAGS='/d:MONO /warn:4 /d:TRACE'
CSCFLAGS_DEBUG="/debug+ /d:DEBUG"
CSCFLAGS_OPTIMIZE="/optimize+"
MONO=mono
MONO_DEBUG='mono --debug'
MONO_PATH=
SYSTEM_XML='System.Xml.dll'


AC_SUBST(CSC)
AC_SUBST(CSC_EXEFLAG)
AC_SUBST(CSC_LIBFLAG)
AC_SUBST(CSC_WINEXEFLAG)
AC_SUBST(CSCFLAGS)
AC_SUBST(MONO)
AC_SUBST(MONO_PATH)
AC_SUBST(SYSTEM_XML)

SRCDIR='$(top_srcdir)/src'
AC_SUBST(SRCDIR)

EMPTY=
SPACE='$(EMPTY) $(EMPTY)'

AC_SUBST(EMPTY)
AC_SUBST(SPACE)


SEP='/'
MONO_MINIMUM_VERSION=0.91
AC_SUBST(MONO_MINIMUM_VERSION)
        
GTK_SHARP_MINIMUM_VERSION=0.91.1
AC_SUBST(GTK_SHARP_MINIMUM_VERSION)
	
AC_SUBST(SIMIAS_INSTALL_PATH)

AC_SUBST(SEP)

#
# Run standard macros
#
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_HEADER_STDC
#AM_PROG_LIBTOOL


#
# Handle --enable-debug
#
AC_ARG_ENABLE(debug, [
  --enable-debug          configure the Makefiles to build in DEBUG mode],
    [case "${enableval}" in
        yes) enable_debug=true ;;
        no)  enable_debug=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
    esac],[enable_debug=false])
AM_CONDITIONAL(DEBUG, test x$enable_debug = xtrue)
if test "$enable_debug" = "true"
then
  # Build debug version.
  CFLAGS="$CFLAGS_DEBUG $CFLAGS"
  CSCFLAGS="$CSCFLAGS_DEBUG $CSCFLAGS"
  CXXFLAGS="$CXXFLAGS_DEBUG $CXXFLAGS"
  DEVENV_CONFIGURATION=Debug
  MONO=$MONO_DEBUG
  NUNIT_FLAGS="$NUNITFLAGS_DEBUG $NUNIT_FLAGS"
else
  # Build optimized version.
  CFLAGS="$CFLAGS_OPTIMIZE $CFLAGS"
  CSCFLAGS="$CSCFLAGS_OPTIMIZE $CSCFLAGS"
  CXXFLAGS="$CXXFLAGS_OPTIMIZE $CXXFLAGS"
  DEVENV_CONFIGURATION=Release
  NUNIT_FLAGS="$NUNITFLAGS_OPTIMIZE $NUNIT_FLAGS"
fi
AC_SUBST(DEVENV_CONFIGURATION)


#
# Configure PKG_CONFIG
#
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
    AC_MSG_ERROR([You need to install pkg-config])
fi

#
# Check for required packages
#
PKG_CHECK_MODULES(SIMIAS, simias >= 0)
AC_SUBST(SIMIAS_LIBS)

PKG_CHECK_MODULES(NAUTILUS_MONO, nautilus-mono >= 0)
AC_SUBST(NAUTILUS_MONO_LIBS)

PKG_CHECK_MODULES(IFOLDER, ifolder >= 0)
AC_SUBST(IFOLDER_LIBS)


#
# Configure files
#
AC_OUTPUT([
Makefile
src/Makefile
])

