AC_INIT(./src/AutoConfig/AutoAccount.cs)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(plugins, 1.0)
# Check to see if the BUILDNUM is set by global build
#if test "$BUILDNUM" = ""; then
#	let "BUILDNUM=`date +%G%j`-2000000"
#fi
ASSEMBLY_VERSION=4
VERSION=$VERSION.$ASSEMBLY_VERSION.0
AM_MAINTAINER_MODE
AC_PROG_CC
if test -d m4; then
echo "adding m4"
AC_CONFIG_MACRO_DIR([m4])
fi
AC_PROG_CXX(am__fastdepCXX)
m4_pattern_allow(PKG_CONFIG)

GTK_SHARP2_MINIMUM_VERSION=1.9.5
AC_SUBST(GTK_SHARP2_MINIMUM_VERSION)

AC_CHECKING([whether a location for the client plugin was specified])
AC_ARG_WITH(clientplugins,
	[AS_HELP_STRING([--with-clientplugins],
	[configure simias to run as a client. This option will also change the default --with-simiasdatadir to the user's home directory. [Default=FALSE]])],        [clientplugins="TRUE"
	]
	)
AC_SUBST(clientplugins)

#
# Check for a 32 / 64
#HACK ALERT : for libflaim 64bit builds
case $host_cpu in
    x86_64|amd64|s390x|ppc64|powerpc64)
        LIB64='lib64'
    ;;
    *)
        LIB64='lib'
    ;;
esac

AC_SUBST(LIB64)


#
# Check for a valid operating system and C# compiler
#
case $host_os in
    linux*)
        SIMIAS_OS='linux'
	if test "$clientplugins" = "TRUE"; then
		AC_CHECK_PROG(CSC, mcs, mcs)
	else
		if pkg-config --atleast-version=2.4 mono > /dev/null 2>&1
		then
			AC_CHECK_PROG(CSC, gmcs, gmcs)
		else
			AC_CHECK_PROG(CSC, gmcs, mcs)
		fi
	fi
        test -z "$CSC" && AC_MSG_ERROR([no C Sharp compiler: (g)mcs not found in \$PATH])
	    PKG_CONFIG_DIR="$LIB64"
	if test "$clientplugins" = "TRUE"; then	
        PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp-2.0 >= $GTK_SHARP2_MINIMUM_VERSION)
        GTK_SHARP_PREFIX=`pkg-config --variable=prefix gtk-sharp-2.0`
        GTK_SHARP_VERSION=`pkg-config --modversion gtk-sharp-2.0`
        AC_SUBST(GTK_SHARP_PREFIX)
        AC_SUBST(GTK_SHARP_LIBS)
	fi

    ;;
    darwin*)
        SIMIAS_OS='darwin'
        AC_CHECK_PROG(CSC, mcs, mcs)
        test -z "$CSC" && AC_MSG_ERROR([no C Sharp compiler: mcs not found in \$PATH])
		export PKG_CONFIG_PATH="/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH"
	    PKG_CONFIG_DIR='lib'
    ;;
    cygwin*)
        SIMIAS_OS='windows'
        AC_CHECK_PROG(CSC, csc, csc)
        test -z "$CSC" && AC_CHECK_PROG(CSC, mcs, mcs)
        test -z "$CSC" && AC_MSG_ERROR([no C Sharp compiler: neither csc nor mcs found in \$PATH])
    	PKG_CONFIG_DIR='.'
    ;;
    *)
        AC_MSG_ERROR([Unknown host_os: $host_os])
    ;;
esac
AC_SUBST(SIMIAS_OS)
AM_CONDITIONAL(LINUX, test "$SIMIAS_OS" = "linux")
AM_CONDITIONAL(WINDOWS, test "$SIMIAS_OS" = "windows")
AM_CONDITIONAL(DARWIN, test "$SIMIAS_OS" = "darwin")
AM_CONDITIONAL(DARWIN_X86, test "$host_cpu" = "i686")
if test "$clientplugins" = "TRUE"; then
	AM_CONDITIONAL(MONO, test "$CSC" = "mcs")
else
	if pkg-config --atleast-version=2.4 mono > /dev/null 2>&1
	then
		AM_CONDITIONAL(MONO, test "$CSC" = "gmcs")
	else
		AM_CONDITIONAL(MONO, test "$CSC" = "mcs")
	fi
fi
AM_CONDITIONAL(DOTNET, test "$CSC" = "csc")


# Check for a resource compiler
#
AC_CHECK_PROG(RESGEN, resgen, resgen)
test -z "$RESGEN" && AC_MSG_ERROR([no resource generator : resgen not found])

#
# We add $prefix to PKG_CONFIG_PATH so pkg-config will find any other
# packages 'make install'-ed to the same prefix.
#
# The default value of $prefix is not set until later in the script.
# We set the default here, if needed.
#
#test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix="${prefix}"

#
#
# Installation directory options.
#
# These are normally left unexpanded so users can "make install exec_prefix=/foo".
# However, we want them expanded.
#
test $bindir = '${exec_prefix}/bin'			&& bindir="${exec_prefix}/bin"
test $sbindir = '${exec_prefix}/sbin'		&& sbindir="${exec_prefix}/sbin"
test $libexecdir = '${exec_prefix}/libexec'	&& libexecdir="${exec_prefix}/${LIB64}/simias"
test $datadir = '${prefix}/share'			&& datadir="${prefix}/share"
test $sysconfdir = '${prefix}/etc'			&& sysconfdir="${prefix}/etc"
test $sharedstatedir = '${prefix}/com'		&& sharedstatedir="${prefix}/com"
test $localstatedir = '${prefix}/var'		&& localstatedir="${prefix}/var"
test $libdir = '${exec_prefix}/lib'			&& libdir="${exec_prefix}/${LIB64}"
test $libdir = '${exec_prefix}/lib64'		&& libdir="${exec_prefix}/${LIB64}"
test $includedir = '${prefix}/include'		&& includedir="${prefix}/include"
test $oldincludedir = '/usr/include'		&& oldincludedir="/usr/include"
test $infodir = '${prefix}/info'			&& infodir="${prefix}/info"
test $mandir = '${prefix}/man'				&& mandir="${prefix}/man"


if test -z "$PKG_CONFIG_PATH"; then
    export PKG_CONFIG_PATH="$prefix/$PKG_CONFIG_DIR/pkgconfig"
else
    export PKG_CONFIG_PATH="$prefix/$PKG_CONFIG_DIR/pkgconfig:$PKG_CONFIG_PATH"
fi
echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH
AC_SUBST(PKG_CONFIG_PATH)

#
# Configure C# compiler settings
#
case $CSC in
    #
    # Mono-specific configuration
    #
    mcs)
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:MONO /warn:4 /d:TRACE'
        CSCFLAGS_DEBUG="/debug+ /d:DEBUG"
        CSCFLAGS_OPTIMIZE="/optimize+"
        MONO=mono
        MONO_DEBUG='mono --debug'
        MONO_PATH=
        SYSTEM_XML='System.Xml.dll'
		if pkg-config --atleast-version=1.1.13 mono > /dev/null 2>&1
		then
			CSCFLAGS="$CSCFLAGS /d:MONONATIVE"
		fi
    ;;
    gmcs)
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:MONO /warn:4 /d:TRACE'
        CSCFLAGS_DEBUG="/debug+ /d:DEBUG"
        CSCFLAGS_OPTIMIZE="/optimize+"
        MONO=mono
        MONO_DEBUG='mono --debug'
        MONO_PATH=
        SYSTEM_XML='System.Xml.dll'
		if pkg-config --atleast-version=1.1.13 mono > /dev/null 2>&1
		then
			CSCFLAGS="$CSCFLAGS /d:MONONATIVE"
		fi
    ;;
    #
    # .NET-specific configuration
    #
    csc)
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:DOTNET /warn:4 /d:TRACE /nologo'
        CSCFLAGS_DEBUG="/debug+ /d:DEBUG"
        CSCFLAGS_OPTIMIZE="/optimize+"
        MONO=
        MONO_DEBUG=
        MONO_PATH=
        SYSTEM_XML='System.XML.dll'
    ;;
esac
AC_SUBST(CSC)
AC_SUBST(CSC_EXEFLAG)
AC_SUBST(CSC_LIBFLAG)
AC_SUBST(CSC_WINEXEFLAG)
AC_SUBST(CSCFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(MONO)
AC_SUBST(MONO_PATH)
AC_SUBST(SYSTEM_XML)

SRCDIR='$(top_srcdir)/src'
TOOLDIR='$(top_srcdir)/dependencies/external/tools'
EXTERNAL_DIR='$(top_srcdir)/dependencies/external'
DOCDIR="$SRCDIR/doc"

PKG_PROG_PKG_CONFIG

case $host_os in
    linux*)
        #PKG_CHECK_MODULES(LOG4NET, log4net >= 1.2.9)
        #AC_SUBST(LOG4NET_PREFIX)
        #AC_SUBST(LOG4NET_LIBS)
        
	PKG_CHECK_MODULES(LIBFLAIM, libflaim >= 4.8.0)
        AC_SUBST(LIBFLAIM_PREFIX)
        AC_SUBST(LIBFLAIM_LIBS)
        AC_SUBST(LIBFLAIM_CFLAGS)

	PKG_CHECK_MODULES(UUID, uuid)
	AC_SUBST(UUID_CFLAGS)
	AC_SUBST(UUID_LIBS)
    ;;
    darwin*)
	case $host_cpu in
         i686*)
             ranlib dependencies/external/libflaim/OSX-x86/libflaim.a
             ;;
         *)
             ranlib dependencies/external/libflaim/OSX/libflaim.a
        ;;
        esac
        
    ;;
esac

AC_SUBST(SRCDIR)
AC_SUBST(TOOLDIR)
AC_SUBST(DOCDIR)

EMPTY=
SPACE='$(EMPTY) $(EMPTY)'

AC_SUBST(EMPTY)
AC_SUBST(SPACE)

COMMON_CLEAN_FILES='*.dbg *.pdb */*.pdb *.doc.xml */*.doc.xml *.test.xml */*.test.xml'
COMMON_DISTCLEAN_FILES='*.suo */*.suo *.csproj.user */*.csproj.user bin obj */bin */obj'
COMMON_MAINTAINER_CLEAN_FILES='Makefile.in'
AC_SUBST(COMMON_CLEAN_FILES)
AC_SUBST(COMMON_DISTCLEAN_FILES)
AC_SUBST(COMMON_MAINTAINER_CLEAN_FILES)

#
# Set platform-specific variables
#
case $SIMIAS_OS in
    #
    # Darwin-specific configuration
    #
    darwin)
        #
        # Set variables
        #
        CFLAGS_DEBUG="-DDEBUG"
        CSCFLAGS="/d:DARWIN $CSCFLAGS"
        EXE_EXT=''
	GACINSTALL=
        ICON_EXT='.ico'
        ICON_FLAG='/resource:'
        INSTALL_EXE_OPTS='-m 644'
        LOG4NET_DIR="$EXTERNAL_DIR/log4net/bin/mono/1.0/release"
        NOVELL_SECURITY_DIR="$EXTERNAL_DIR/NS/mono"
        NUNIT="mono nunit-console.exe"
        NUNIT_LIBPATH="$TOOLDIR/NUnit/mono/bin"
        NUNIT_FLAGS='/nologo'
        NUNITFLAGS_DEBUG=''
		MONO=mono
        NUNITFLAGS_OPTIMIZE=''
        OBJ_EXT='.o'
        REPORT_DIR='$(DESTDIR)$(webbindir)'
        REPORT_EXE='mint $(top_srcdir)/tools/Report/Report.exe'
        SEP='/'
        SHARED_LIB_EXT=
        SHARED_LIB_FLAG='-dylib'
        STORELIB="sqlite"
        STORELIB_PATH="$EXTERNAL_DIR/sqlite/darwin"
		LDOUT='-o '
        AC_CHECK_PROG(CXX, g++, g++)
        # AC_CHECK_PROG(CXX, g++-3.3, g++-3.3)
		# LD='$(CXX) -dynamiclib '
		StoreProviderAssembly="SimiasLib.dll"
		StoreProviderType="Simias.Storage.Provider.Flaim.FlaimProvider"
		#StoreProviderAssembly="SqliteProvider.dll"
		#StoreProviderType="Simias.Storage.Provider.Sqlite.SqliteProvider"
		mappingpath="${exec_prefix}/${LIB64}/simias/web/bin/Simias.exe"
				 GSOAP_PATH="$TOOLDIR/gsoap/macosx-x86-2.7"
    ;;
    #
    # Linux-specific configuration
    #
    linux)
        #
        # Set variables
        #
        CFLAGS_DEBUG="-DDEBUG"
        CSCFLAGS="/d:LINUX $CSCFLAGS"
        EXE_EXT=''
	GACINSTALL=
        ICON_EXT='.ico'
        ICON_FLAG='/resource:'
        INSTALL_EXE_OPTS='--mode=644'
        LOG4NET_DIR=
        NOVELL_SECURITY_DIR="$EXTERNAL_DIR/NS/mono"
        NUNIT="mono nunit-console.exe"
        NUNIT_LIBPATH="$TOOLDIR/NUnit/mono/bin"
        NUNIT_FLAGS='/nologo'
        NUNITFLAGS_DEBUG=''
        NUNITFLAGS_OPTIMIZE=''
        OBJ_EXT='.o'
        REPORT_DIR='$(DESTDIR)$(webbindir)'
        REPORT_EXE='mono $TOOLDIR/Report/Report.exe'
        SEP='/'
        SHARED_LIB_EXT='.so'
        SHARED_LIB_FLAG='-shared'
        STORELIB="libsqlite.so"
        STORELIB_PATH="$EXTERNAL_DIR/sqlite/linux"
		LDOUT='-o'
		# have to add this check on redhat for some reason
        AC_CHECK_PROG(CXX, g++, g++)
		StoreProviderAssembly="SimiasLib.dll"
		StoreProviderType="Simias.Storage.Provider.Flaim.FlaimProvider"
		GSOAP_PATH="$TOOLDIR/gsoap/linux-2.7"
		mappingpath="${exec_prefix}/${LIB64}/simias/web/bin/Simias.exe"
    ;;
    #
    # Windows-specific configuration
    #
    windows)
        #
        # Check for valid compilers
        #
        AC_CHECK_PROG(CC, cl, cl)
        test -z "$CC" && AC_MSG_ERROR([no acceptable C compiler found in \$PATH])
        AC_CHECK_PROG(CXX, cl, cl)
        test -z "$CXX" && AC_MSG_ERROR([no acceptable C++ compiler found in \$PATH])
        AC_CHECK_PROG(LD, link, link)
        test -z "$LD" && AC_MSG_ERROR([no acceptable linker found in \$PATH])
        #
        # Set variables
        #
        CC='cl -c'
        CXX='cl -c'
        CDEF='-D'
        CFLAGS="-nologo -W3 -DWIN32 -D_WINDOWS -DWINDOWS -DPACKAGE=\$(PACKAGE) -DVERSION=\$(VERSION)";
        CFLAGS_DEBUG="-MDd -Od -Zi -RTC1 -DDEBUG -D_DEBUG"
        CFLAGS_OPTIMIZE="-MD -O2 -DNDEBUG"
        CINC='-I'
        COUT='-Fo'
        CSCFLAGS="/d:WINDOWS $CSCFLAGS"
        CXXFLAGS="-nologo -GX -W3 -DWIN32 -D_WINDOWS -DWINDOWS -DPACKAGE=\$(PACKAGE) -DVERSION=\$(VERSION)";
        CXXFLAGS_DEBUG="-MDd -Od -Zi -RTC1 -DDEBUG -D_DEBUG"
        CXXFLAGS_OPTIMIZE="-MD -O2 -DNDEBUG"
        DEF='-def:'
        EMPTY=
        EXE_EXT='.exe'
	GACINSTALL='gacutil /i'
        ICON_EXT='.ico'
        ICON_FLAG='/win32icon:'
        INSTALL_EXE_OPTS=''
        LDFLAGS='-nologo -machine:X86'
        LDFLAGS_DEBUG="-DEBUG"
        LDINC='-libpath:'
        LDOUT='-out:'
        LIB_EXT='.lib'
        LIB_PRE=''
        LIBFLAG=''
        LIBS='kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib rpcrt4.lib ws2_32.lib imagehlp.lib'
        LOG4NET_DIR="$EXTERNAL_DIR/log4net/bin/net/1.0/release"
        NOVELL_SECURITY_DIR="$EXTERNAL_DIR/NS/net"
        NUNIT="nunit-console.exe"
        NUNIT_LIBPATH="$TOOLDIR/NUnit/net/bin"
        NUNIT_FLAGS='/nologo'
        NUNITFLAGS_DEBUG=''
        NUNITFLAGS_OPTIMIZE=''
        OBJ_EXT='.obj'
        RC='rc'
        RC_FLAGS='-r'
        REPORT_DIR='$(shell cygpath --windows $(DESTDIR)$(webbindir) | sed ''s,\\\\,/,g'')'
        REPORT_EXE='$(top_srcdir)/tools/Report/Report.exe'
        RES_EXT='.res'
        SEP='$(EMPTY)\\$(EMPTY)'
        SHARED_LIB_EXT='.dll'
        SHARED_LIB_FLAG='-dll'
        STORELIB="sqlite.dll"
        STORELIB_PATH="$EXTERNAL_DIR/sqlite/w32"
        SYSTEM_XML='System.XML.dll'
		GSOAP_PATH="$TOOLDIR/gsoap/WIN32-2.7"
        #
    	# Override Linux-like directory structure
        #
    	bindir="${exec_prefix}"
    	sbindir="${exec_prefix}"
    	libexecdir="${exec_prefix}"
    	libdir="${exec_prefix}"
		StoreProviderAssembly="SimiasLib.dll"
		StoreProviderType="Simias.Storage.Provider.Flaim.FlaimProvider"
		mappingpath=`cygpath --windows ${exec_prefix}/web/bin/Simias.exe`
    ;;
esac
AC_SUBST(CDEF)
AC_SUBST(CINC)
AC_SUBST(COUT)
AC_SUBST(CXX)
AC_SUBST(CXXFLAGS)
AC_SUBST(DEF)
AC_SUBST(GACINSTALL)
AC_SUBST(ICON_EXT)
AC_SUBST(ICON_FLAG)
AC_SUBST(INSTALL_EXE_OPTS)
AC_SUBST(LDFLAGS)
AC_SUBST(LDINC)
AC_SUBST(LDOUT)
AC_SUBST(LIB_PRE)
AC_SUBST(LIBS)
AC_SUBST(LOG4NET_DIR)
AC_SUBST(NOVELL_SECURITY_DIR)
AC_SUBST(NUNIT)
AC_SUBST(NUNIT_FLAGS)
AC_SUBST(NUNIT_LIBPATH)
AC_SUBST(OBJ_EXT)
AC_SUBST(REPORT_DIR)
AC_SUBST(REPORT_EXE)
AC_SUBST(SEP)
AC_SUBST(SHARED_LIB_EXT)
AC_SUBST(SHARED_LIB_FLAG)
AC_SUBST(STORELIB)
AC_SUBST(STORELIB_PATH)
AC_SUBST(StoreProviderAssembly)
AC_SUBST(StoreProviderType)
AC_SUBST(GSOAP_PATH)
AC_SUBST(mappingpath)

# We have our own "standard" directories for web services.
#
webdir="${libexecdir}/web"
webbindir="${webdir}/bin"
modulesdir="${webdir}/modules"
AC_SUBST(webdir)
AC_SUBST(webbindir)
AC_SUBST(modulesdir)


#
# Setup standard directories for webaccess app domain
#
webaccessdir="${libexecdir}/webaccess"
AC_SUBST(webaccessdir)

#
# Setup standard directories for admin app domain
#
admindir="${libexecdir}/admin"
AC_SUBST(admindir)


#
# Setup the bootstrapdir
#
simiasconfdir="${sysconfdir}/simias"
AC_SUBST(simiasconfdir)

#
# Setup the bootstrapdir
#
bootstrapdir="${simiasconfdir}/bill"
AC_SUBST(bootstrapdir)

#
# Set pkg-config variables
#
PKG_CONFIG_REQUIRES=""
PKG_CONFIG_CONFLICTS=""
PKG_CONFIG_LIBS="/r:SimiasLib.dll"
AC_SUBST(PKG_CONFIG_REQUIRES)
AC_SUBST(PKG_CONFIG_CONFLICTS)
AC_SUBST(PKG_CONFIG_LIBS)

CLIENT_PKG_CONFIG_REQUIRES=""
CLIENT_PKG_CONFIG_CONFLICTS=""
CLIENT_PKG_CONFIG_LIBS="/r:SimiasClient.dll"
AC_SUBST(CLIENT_PKG_CONFIG_REQUIRES)
AC_SUBST(CLIENT_PKG_CONFIG_CONFLICTS)
AC_SUBST(CLIENT_PKG_CONFIG_LIBS)

#
# Run standard macros
#
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_HEADER_STDC
AM_PROG_LIBTOOL

#
# Handle --enable-debug
#
AC_ARG_ENABLE(debug, [
  --enable-debug          configure the Makefiles to build in DEBUG mode],
    [case "${enableval}" in
        yes) enable_debug=true ;;
        no)  enable_debug=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
    esac],[enable_debug=false])
AM_CONDITIONAL(DEBUG, test x$enable_debug = xtrue)
if test "$enable_debug" = "true"
then
  # Build debug version.
  CFLAGS="$CFLAGS_DEBUG $CFLAGS"
  CSCFLAGS="$CSCFLAGS_DEBUG $CSCFLAGS"
  CXXFLAGS="$CXXFLAGS_DEBUG $CXXFLAGS"
  DEVENV_CONFIGURATION=Debug
  MONO=$MONO_DEBUG
  NUNIT_FLAGS="$NUNITFLAGS_DEBUG $NUNIT_FLAGS"
else
  # Build optimized version.
  CFLAGS="$CFLAGS_OPTIMIZE $CFLAGS"
  CSCFLAGS="$CSCFLAGS_OPTIMIZE $CSCFLAGS"
  CXXFLAGS="$CXXFLAGS_OPTIMIZE $CXXFLAGS"
  DEVENV_CONFIGURATION=Release
  NUNIT_FLAGS="$NUNITFLAGS_OPTIMIZE $NUNIT_FLAGS"
fi
AC_SUBST(DEVENV_CONFIGURATION)

#
# Handle --with-clientplugins
#
AC_CHECKING([whether a location for the runasclient was specified])
AC_ARG_WITH(clientplugins,
	[AS_HELP_STRING([--with-clientplugins],
	[configure plugins to be built only for client. [Default=FALSE]])],
	[clientplugins="TRUE"
		AC_CONFIG_FILES([
			src/AutoConfig/Makefile
			src/ConflictFrwk/Makefile
		])
	],
 	[clientplugins="FALSE"
            AC_CONFIG_FILES([
				src/UserMovement/Makefile
				src/LdapGroup/Makefile
				src/LdapGroup/Simias.IdentitySync/Makefile
				src/LdapGroup/Simias.LdapProvider/Makefile
				src/LdapGroup/Simias.OpenLdapProvider/Makefile
				src/LdapGroup/Simias.ADLdapProvider/Makefile
				src/LdapGroup/Simias.UserAdd/Makefile
			])
         ]
	)
AC_SUBST(clientplugins)
AM_CONDITIONAL(PLUGINS_FOR_CLIENT, test "$clientplugins" = "TRUE")

#
# Configure PKG_CONFIG
#
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
    AC_MSG_ERROR([You need to install pkg-config])
fi

#
# Try to locate the mod_mono.conf file so we can setup our conf files
# to include it
#
MODMONO_CONFPATH="/etc/apache2/mod_mono.conf"

if test -e "/etc/apache2/conf.d/mod_mono.conf"; then
	MODMONO_CONFPATH="/etc/apache2/conf.d/mod_mono.conf"
fi

if test -e "/etc/httpd/conf.d/mod_mono.conf"; then
	MODMONO_CONFPATH="/etc/httpd/conf.d/mod_mono.conf"
fi

if test -e "/etc/httpd/mod_mono.conf"; then
	MODMONO_CONFPATH="/etc/httpd/mod_mono.conf"
fi

AC_SUBST(MODMONO_CONFPATH)


#
# Configure files
#
AC_OUTPUT([
Makefile
src/Makefile
])



