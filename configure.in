AC_INIT(src/iFolder/iFolder.cs)

PASSALONG_CONFIG_OPTIONS=$*

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(ifolder, 0.7)
AM_MAINTAINER_MODE
AC_PROG_CC

SRCDIR='$(top_srcdir)/src'
TOOLDIR='$(top_srcdir)/tools'
DOCDIR="$SRCDIR/doc"
APIDOCDIR="$SRCDIR/api-doc"

EMPTY=
SPACE='$(EMPTY) $(EMPTY)'

COMMON_SUBDIRS="iFolder"
LINUX_SUBDIRS="GtkTrayApp"
WINDOWS_SUBDIRS="FormsTrayApp FormsInvitationWizard iFolderShell"
NOBUILD_SUBDIRS="iFolderNautilus"

#
# Check for a valid operating system
#
case $host_os in
    linux*)
        IFOLDER_OS='linux'
    ;;
    cygwin*)
        IFOLDER_OS='windows'
    ;;
    *)
        AC_MSG_ERROR([Unknown host_os: $host_os])
    ;;
esac
AC_SUBST(IFOLDER_OS)
AM_CONDITIONAL(LINUX, test "$IFOLDER_OS" = "linux")
AM_CONDITIONAL(WINDOWS, test "$IFOLDER_OS" = "windows")

#
# Set platform-specific variables
#
case $IFOLDER_OS in
    #
    # Linux-specific configuration
    #
    linux)
        #
        # Check for valid compilers
        #
        AC_CHECK_PROG(CSC, mcs, mcs)
        test -z "$CSC" && AC_MSG_ERROR([no acceptable C Sharp compiler found in \$PATH])
        AC_CHECK_PROG(CC, cc, cc)
        test -z "$CC" && AC_MSG_ERROR([no acceptable C compiler found in \$PATH])
        AC_CHECK_PROG(CXX, c++, c++)
        test -z "$CXX" && AC_MSG_ERROR([no acceptable C++ compiler found in \$PATH])
        AC_CHECK_PROG(LD, c++, c++)
        test -z "$LD" && AC_MSG_ERROR([no acceptable linker found in \$PATH])
        #
        # Set variables
        #
        CC='cc -c'
        CDEF='-D'
        CFLAGS="-pipe -Wall -W -DLINUX -DPRODUCT_NAME=@PRODUCT_NAME@ -DPRODUCT_VERSION=@PRODUCT_VERSION@"
        CINC='-I'
        COMMON_CLEAN_FILES='.cstore .simias'
        COUT='-o'
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:MONO /warn:4 /d:TRACE'
        CXX='c++ -c'
        CXXFLAGS="-pipe -Wall -W -DLINUX -DPACKAGE=\$(PACKAGE) -DVERSION=\$(VERSION)";
        DEBUG_CFLAGS="-g -DDEBUG"
        DEBUG_CSCFLAGS="/debug+ /d:DEBUG"
        DEBUG_CXXFLAGS="-g -DDEBUG"
        DEBUG_LDFLAGS="-g"
        DEBUG_NUNIT_FLAGS='--debug'
        EMPTY=
        EXE_EXT=''
        ICON_EXT='.ico'
        ICON_FLAG='/resource:'
        LDFLAGS=''
        LDINC='-L'
        LDOUT='-o '
        LIB_EXT=''
        LIB_PRE='lib'
        LIBFLAG='-l'
        LIBS=''
        MONO=mono
        MONO_DEBUG='mono --debug'
        MONO_PATH='$(subst $(SPACE),:,$(addprefix $(SRCDIR)$(SEP),$(COMMON_SUBDIRS))):$(ADDRESSBOOK_INSTALL_PATH)/bin:$(SIMIAS_INSTALL_PATH)/bin'
        NUNIT="$TOOLDIR/NUnit/bin/nunit-console.exe"
        NUNIT_FLAGS='/nologo'
        NUNIT_LIBPATH="$TOOLDIR/NUnit/bin"
        OBJ_EXT='.o'
        OPTIMIZE_CFLAGS="-O2 -DNDEBUG"
        OPTIMIZE_CSCFLAGS="/optimize+"
        OPTIMIZE_CXXFLAGS="-O2 -DNDEBUG"
        OPTIMIZE_LDFLAGS=""
        OPTIMIZE_NUNIT_FLAGS=''
        PLATFORM_SUBDIRS=$LINUX_SUBDIRS
        REPORT_DIR='$(DESTDIR)$(bindir)'
        REPORT_EXE='mono $(top_srcdir)/tools/Report/Report.exe'
        SEP='/'
        SHARED_LIB_EXT='.so'
        SHARED_LIB_FLAG='-shared'
        SQLITELIB_PATH="../../external/sqlite/linux"
        SQLITELIB="libsqlite.so"
        SYSTEM_XML='System.Xml.dll'
    ;;
    #
    # Windows-specific configuration
    #
    windows)
        #
        # Check for valid compilers
        #
        AC_CHECK_PROG(CSC, csc, csc)
        test -z "$CSC" && AC_MSG_ERROR([no acceptable C Sharp compiler found in \$PATH])
        AC_CHECK_PROG(CC, cl, cl)
        test -z "$CC" && AC_MSG_ERROR([no acceptable C compiler found in \$PATH])
        AC_CHECK_PROG(CXX, cl, cl)
        test -z "$CXX" && AC_MSG_ERROR([no acceptable C++ compiler found in \$PATH])
        AC_CHECK_PROG(LD, link, link)
        test -z "$LD" && AC_MSG_ERROR([no acceptable linker found in \$PATH])
        #
        # Set variables
        #
        CC='cl -c'
        CXX='cl -c'
        CDEF='-D'
        CFLAGS="-nologo -W3 -DWIN32 -D_WINDOWS -DWINDOWS -DPRODUCT_NAME=@PRODUCT_NAME@ -DPRODUCT_VERSION=@PRODUCT_VERSION@";
        CINC='-I'
        COMMON_CLEAN_FILES='*.suo */*.suo *.csproj.user */*.csproj.user bin obj */bin */obj *.xml */*.xml *.pdb */*.pdb .cstore .simias'
        COUT='-Fo'
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:DOTNET /warn:4 /d:TRACE /nologo'
        CXXFLAGS="-nologo -GX -W3 -DWIN32 -D_WINDOWS -DWINDOWS -DPACKAGE=\$(PACKAGE) -DVERSION=\$(VERSION)";
        DEBUG_CFLAGS="-MDd -Od -Zi -RTC1 -DDEBUG -D_DEBUG"
        DEBUG_CSCFLAGS="/debug+ /d:DEBUG"
        DEBUG_CXXFLAGS="-MDd -Od -Zi -RTC1 -DDEBUG -D_DEBUG"
        DEBUG_LDFLAGS="-DEBUG"
        DEBUG_NUNIT_FLAGS=''
        DEF='-def:'
        EMPTY=
        EXE_EXT='.exe'
        ICON_EXT='.ico'
        ICON_FLAG='/win32icon:'
        LDFLAGS='-nologo -machine:X86'
        LDINC='-libpath:'
        LDOUT='-out:'
        LIB_EXT='.lib'
        LIB_PRE=''
        LIBFLAG=''
        LIBS='kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib rpcrt4.lib ws2_32.lib imagehlp.lib'
        MONO=
        MONO_DEBUG=
        MONO_PATH=
        NUNIT="$TOOLDIR/NUnit/bin/nunit-console.exe"
        NUNIT_FLAGS='/nologo'
        NUNIT_LIBPATH='$(shell cygpath --windows "$TOOLDIR/NUnit/bin")'
        OBJ_EXT='.obj'
        OPTIMIZE_CFLAGS="-MD -O2 -DNDEBUG"
        OPTIMIZE_CSCFLAGS="/optimize+"
        OPTIMIZE_CXXFLAGS="-MD -O2 -DNDEBUG"
        OPTIMIZE_NUNIT_FLAGS=''
        PLATFORM_SUBDIRS=$WINDOWS_SUBDIRS
        RC='rc'
        RC_FLAGS='-r'
        REPORT_DIR='$(shell cygpath --windows $(DESTDIR)$(bindir) | sed ''s,\\\\,/,g'')'
        REPORT_EXE='$(top_srcdir)/tools/Report/Report.exe'
        RES_EXT='.res'
        SEP='$(EMPTY)\\$(EMPTY)'
        SHARED_LIB_EXT='.dll'
        SHARED_LIB_FLAG='-dll'
        SQLITELIB="sqlite.dll"
        SQLITELIB_PATH="../../external/sqlite/w32"
        SYSTEM_XML='System.XML.dll'
        TLBX='tlbexp'
        TYPE_LIB_EXT='.tlb'
    ;;
esac
AC_SUBST(APIDOCDIR)
AC_SUBST(CDEF)
AC_SUBST(CINC)
AC_SUBST(COMMON_CLEAN_FILES)
AC_SUBST(COMMON_SUBDIRS)
AC_SUBST(COUT)
AC_SUBST(CSC)
AC_SUBST(CSCFLAGS)
AC_SUBST(CSC_EXEFLAG)
AC_SUBST(CSC_LIBFLAG)
AC_SUBST(CSC_WINEXEFLAG)
AC_SUBST(CXX)
AC_SUBST(CXXFLAGS)
AC_SUBST(DEF)
AC_SUBST(DOCDIR)
AC_SUBST(EMPTY)
AC_SUBST(ICON_EXT)
AC_SUBST(ICON_FLAG)
AC_SUBST(LDFLAGS)
AC_SUBST(LDINC)
AC_SUBST(LDOUT)
AC_SUBST(LIBS)
AC_SUBST(LINUX_SUBDIRS)
AC_SUBST(MONO)
AC_SUBST(MONO_PATH)
AC_SUBST(NOBUILD_SUBDIRS)
AC_SUBST(NUNIT)
AC_SUBST(NUNIT_FLAGS)
AC_SUBST(NUNIT_LIBPATH)
AC_SUBST(OBJ_EXT)
AC_SUBST(PLATFORM_SUBDIRS)
AC_SUBST(RC)
AC_SUBST(RCFLAGS)
AC_SUBST(REPORT_DIR)
AC_SUBST(REPORT_EXE)
AC_SUBST(RES_EXT)
AC_SUBST(ROOTDIR)
AC_SUBST(SEP)
AC_SUBST(SHARED_LIB_FLAG)
AC_SUBST(SPACE)
AC_SUBST(SRCDIR)
AC_SUBST(SYSTEM_XML)
AC_SUBST(TLBX)
AC_SUBST(TOOLDIR)
AC_SUBST(WINDOWS_SUBDIRS)

#
# Run standard macros
#
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_HEADER_STDC
#AM_PROG_LIBTOOL

#
# Handle --with-simias-install-path
#
AC_ARG_WITH(simias-install-path, [
  --with-simias-install-path=DIR
                          path to where Simias is installed [[PREFIX]]],
    [ SIMIAS_INSTALL_PATH=$withval ],
    [ SIMIAS_INSTALL_PATH=$prefix ]
    )
test "x$SIMIAS_INSTALL_PATH" = xNONE && SIMIAS_INSTALL_PATH=$ac_default_prefix
mkdir -p $SIMIAS_INSTALL_PATH || AC_MSG_ERROR([mkdir -p $SIMIAS_INSTALL_PATH failed])
SIMIAS_INSTALL_PATH=`cd $SIMIAS_INSTALL_PATH && pwd`
case $IFOLDER_OS in
    windows)
        SIMIAS_INSTALL_PATH=`cygpath --windows $SIMIAS_INSTALL_PATH | sed 's,\\\\,/,g'`
    ;;
esac
echo SIMIAS_INSTALL_PATH=$SIMIAS_INSTALL_PATH
AC_SUBST(SIMIAS_INSTALL_PATH)

#
# Handle --with-simias-build-path
#
AC_ARG_WITH(simias-build-path, [
  --with-simias-build-path=DIR
                          path to a Simias build [[NONE]]],
    [ SIMIAS_BUILD_PATH=$withval ],
    [ SIMIAS_BUILD_PATH=NONE ]
    )
if test "x$SIMIAS_BUILD_PATH" = xNONE; then
    SIMIAS_BUILD_PATH=''
else
    test -d $SIMIAS_BUILD_PATH || AC_MSG_ERROR([$SIMIAS_BUILD_PATH does not exist])
    SIMIAS_BUILD_PATH=`cd $SIMIAS_BUILD_PATH && pwd`
    case $IFOLDER_OS in
        windows)
            SIMIAS_BUILD_PATH=`cygpath --windows $SIMIAS_BUILD_PATH | sed 's,\\\\,/,g'`
        ;;
    esac
fi
echo SIMIAS_BUILD_PATH=$SIMIAS_BUILD_PATH
AC_SUBST(SIMIAS_BUILD_PATH)

#
# Handle --with-addressbook-install-path
#
AC_ARG_WITH(addressbook-install-path, [
  --with-addressbook-install-path=DIR
                          path to where AddressBook is installed [[PREFIX]]],
    [ ADDRESSBOOK_INSTALL_PATH=$withval ],
    [ ADDRESSBOOK_INSTALL_PATH=$prefix ]
    )
test "x$ADDRESSBOOK_INSTALL_PATH" = xNONE && ADDRESSBOOK_INSTALL_PATH=$ac_default_prefix
mkdir -p $ADDRESSBOOK_INSTALL_PATH || AC_MSG_ERROR([mkdir -p $ADDRESSBOOK_INSTALL_PATH failed])
ADDRESSBOOK_INSTALL_PATH=`cd $ADDRESSBOOK_INSTALL_PATH && pwd`
case $IFOLDER_OS in
    windows)
        ADDRESSBOOK_INSTALL_PATH=`cygpath --windows $ADDRESSBOOK_INSTALL_PATH | sed 's,\\\\,/,g'`
    ;;
esac
echo ADDRESSBOOK_INSTALL_PATH=$ADDRESSBOOK_INSTALL_PATH
AC_SUBST(ADDRESSBOOK_INSTALL_PATH)

#
# Handle --with-addressbook-build-path
#
AC_ARG_WITH(addressbook-build-path, [
  --with-addressbook-build-path=DIR
                          path to an AddressBook build [[NONE]]],
    [ ADDRESSBOOK_BUILD_PATH=$withval ],
    [ ADDRESSBOOK_BUILD_PATH=NONE ]
    )
if test "x$ADDRESSBOOK_BUILD_PATH" = xNONE; then
    ADDRESSBOOK_BUILD_PATH=''
else
    test -d $ADDRESSBOOK_BUILD_PATH || AC_MSG_ERROR([$ADDRESSBOOK_BUILD_PATH does not exist])
    ADDRESSBOOK_BUILD_PATH=`cd $ADDRESSBOOK_BUILD_PATH && pwd`
    case $IFOLDER_OS in
        windows)
            ADDRESSBOOK_BUILD_PATH=`cygpath --windows $ADDRESSBOOK_BUILD_PATH | sed 's,\\\\,/,g'`
        ;;
    esac
fi
echo ADDRESSBOOK_BUILD_PATH=$ADDRESSBOOK_BUILD_PATH
AC_SUBST(ADDRESSBOOK_BUILD_PATH)

DISTCHECK_CONFIGURE_FLAGS="--with-simias-install-path=$SIMIAS_INSTALL_PATH --with-addressbook-install-path=$ADDRESSBOOK_INSTALL_PATH"
AC_SUBST(DISTCHECK_CONFIGURE_FLAGS)


#
# Handle --enable-debug
#
AC_ARG_ENABLE(debug, [
  --enable-debug          configure the Makefiles to build in DEBUG mode],
    [case "${enableval}" in
        yes) enable_debug=true ;;
        no)  enable_debug=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
    esac],[enable_debug=false])
AM_CONDITIONAL(DEBUG, test x$enable_debug = xtrue)
if test "$enable_debug" = "true"
then
  # Build debug version.
  CFLAGS="$DEBUG_CFLAGS $CFLAGS"
  CSCFLAGS="$DEBUG_CSCFLAGS $CSCFLAGS"
  CXXFLAGS="$DEBUG_CXXFLAGS $CXXFLAGS"
  DEVENV_CONFIGURATION=Debug
  MONO=$MONO_DEBUG
  NUNIT_FLAGS="$DEBUG_NUNITFLAGS $NUNIT_FLAGS"
else
  # Build optimized version.
  CFLAGS="$OPTIMIZE_CFLAGS $CFLAGS"
  CSCFLAGS="$OPTIMIZE_CSCFLAGS $CSCFLAGS"
  CXXFLAGS="$OPTIMIZE_CXXFLAGS $CXXFLAGS"
  DEVENV_CONFIGURATION=Release
  NUNIT_FLAGS="$OPTIMIZE_NUNITFLAGS $NUNIT_FLAGS"
fi
AC_SUBST(CSCFLAGS)
AC_SUBST(DEVENV_CONFIGURATION)

#
# Configure PKG_CONFIG
#
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
    AC_MSG_ERROR([You need to install pkg-config])
fi
case $IFOLDER_OS in
    linux)
        GTK_SHARP_REQUIRED_VERSION=0.10
        PKG_CHECK_MODULES(BASE_DEPENDENCIES, gtk-sharp >= $GTK_SHARP_REQUIRED_VERSION)
    ;;
esac

#
# We handle the --prefix and --with-{simias|addressbook}-{build|install}-path options
# so we remove them and pass all other configuration options on to any subproject
# we configure.
#
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--prefix=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's,--prefix=[[^ ]][[^ ]]* *,,'`
fi
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--with-simias-build-path=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's/--with-simias-build-path=[[^ ]][[^ ]]* *//'`
fi
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--with-simias-install-path=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's/--with-simias-install-path=[[^ ]][[^ ]]* *//'`
fi
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--with-addressbook-build-path=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's/--with-addressbook-build-path=[[^ ]][[^ ]]* *//'`
fi
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--with-addressbook-install-path=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's/--with-addressbook-install-path=[[^ ]][[^ ]]* *//'`
fi
echo PASSALONG_CONFIG_OPTIONS=$PASSALONG_CONFIG_OPTIONS

#
# Configure Simias subproject, if specified, only if not configuring AddressBook.
# Otherwise, Simias will be configured when AddressBook is configured.
#
if test -n "$SIMIAS_BUILD_PATH" && test -z "$ADDRESSBOOK_BUILD_PATH"; then
    CONFIG_OPTIONS=$PASSALONG_CONFIG_OPTIONS
    if test -n "$SIMIAS_INSTALL_PATH"; then
        CONFIG_OPTIONS="--prefix=$SIMIAS_INSTALL_PATH ${CONFIG_OPTIONS}"
    else
        test "x$prefix" != xNONE &&
            CONFIG_OPTIONS="--prefix=${prefix} ${CONFIG_OPTIONS}"
    fi
    if test -x "$SIMIAS_BUILD_PATH/configure"; then
        CONFIG_CMD="./configure"
    else
        CONFIG_CMD="./autogen.sh"
    fi
    CONFIG_CMD="$CONFIG_CMD  $CONFIG_OPTIONS"
    echo "----------------------------------------------------------------------"
    echo "cd $SIMIAS_BUILD_PATH; $CONFIG_CMD"
    (cd $SIMIAS_BUILD_PATH; eval $CONFIG_CMD)
    echo "----------------------------------------------------------------------"
    SUBPROJECT_BUILD_PATHS="$SIMIAS_BUILD_PATH"
    echo "continuing configure in `pwd`"
fi

#
# Configure AddressBook subproject, if specified.
#
if test -n "$ADDRESSBOOK_BUILD_PATH"; then
    CONFIG_OPTIONS=$PASSALONG_CONFIG_OPTIONS
    test -n "$SIMIAS_INSTALL_PATH" &&
        CONFIG_OPTIONS="--with-simias-install-path=$SIMIAS_INSTALL_PATH ${CONFIG_OPTIONS}"
    test -n "$SIMIAS_BUILD_PATH" &&
        CONFIG_OPTIONS="--with-simias-build-path=$SIMIAS_BUILD_PATH ${CONFIG_OPTIONS}"
    if test -n "$ADDRESSBOOK_INSTALL_PATH"; then
        CONFIG_OPTIONS="--prefix=$ADDRESSBOOK_INSTALL_PATH ${CONFIG_OPTIONS}"
    else
        test "x$prefix" != xNONE &&
            CONFIG_OPTIONS="--prefix=${prefix} ${CONFIG_OPTIONS}"
    fi
    if test -x "$ADDRESSBOOK_BUILD_PATH/configure"; then
        CONFIG_CMD="./configure"
    else
        CONFIG_CMD="./autogen.sh"
    fi
    CONFIG_CMD="$CONFIG_CMD  $CONFIG_OPTIONS"
    echo "----------------------------------------------------------------------"
    echo "cd $ADDRESSBOOK_BUILD_PATH; $CONFIG_CMD"
    (cd $ADDRESSBOOK_BUILD_PATH; eval $CONFIG_CMD)
    echo "----------------------------------------------------------------------"
    SUBPROJECT_BUILD_PATHS="$ADDRESSBOOK_BUILD_PATH"
    echo "continuing configure in `pwd`"
fi
AC_SUBST(SUBPROJECT_BUILD_PATHS)
AM_CONDITIONAL(BUILD_SUBPROJECTS, test -n "$SUBPROJECT_BUILD_PATHS")

#
# Configure files
#
AC_OUTPUT([
Makefile
src/Makefile
src/iFolder/Makefile
src/GtkTrayApp/Makefile
src/GtkTrayApp/ifolder
src/GtkTrayApp/invitationwizard
src/iFolderNautilus/Makefile
src/FormsTrayApp/Makefile
src/FormsInvitationWizard/Makefile
src/iFolderShell/Makefile
package/Makefile
package/windows/Makefile
package/linux/Makefile
package/linux/ifolder.spec
])
