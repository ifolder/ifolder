//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="iFolder Web ServiceSoap", Namespace="http://novell.com/ifolder/web/")]
public class iFolderWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public iFolderWebService() {
        this.Url = "http://localhost:8086/iFolder.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/Ping", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Ping() {
        this.Invoke("Ping", new object[0]);
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Ping", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetSettings", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderSettings GetSettings() {
        object[] results = this.Invoke("GetSettings", new object[0]);
        return ((iFolderSettings)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSettings(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSettings", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderSettings EndGetSettings(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSettings)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetDisplayConfirmation", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetDisplayConfirmation(bool DisplayConfirmation) {
        this.Invoke("SetDisplayConfirmation", new object[] {
                    DisplayConfirmation});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetDisplayConfirmation(bool DisplayConfirmation, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDisplayConfirmation", new object[] {
                    DisplayConfirmation}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetDisplayConfirmation(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/IsiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool IsiFolder(string LocalPath) {
        object[] results = this.Invoke("IsiFolder", new object[] {
                    LocalPath});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsiFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsiFolder", new object[] {
                    LocalPath}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndIsiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CanBeiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool CanBeiFolder(string LocalPath) {
        object[] results = this.Invoke("CanBeiFolder", new object[] {
                    LocalPath});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCanBeiFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CanBeiFolder", new object[] {
                    LocalPath}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndCanBeiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/IsPathIniFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool IsPathIniFolder(string LocalPath) {
        object[] results = this.Invoke("IsPathIniFolder", new object[] {
                    LocalPath});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsPathIniFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPathIniFolder", new object[] {
                    LocalPath}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndIsPathIniFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CreateLocaliFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolder CreateLocaliFolder(string Path) {
        object[] results = this.Invoke("CreateLocaliFolder", new object[] {
                    Path});
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateLocaliFolder(string Path, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateLocaliFolder", new object[] {
                    Path}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolder EndCreateLocaliFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolder GetiFolder(string iFolderID) {
        object[] results = this.Invoke("GetiFolder", new object[] {
                    iFolderID});
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolder", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderByLocalPath", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolder GetiFolderByLocalPath(string LocalPath) {
        object[] results = this.Invoke("GetiFolderByLocalPath", new object[] {
                    LocalPath});
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolderByLocalPath(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderByLocalPath", new object[] {
                    LocalPath}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolder EndGetiFolderByLocalPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/DeleteiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DeleteiFolder(string iFolderID) {
        this.Invoke("DeleteiFolder", new object[] {
                    iFolderID});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteiFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteiFolder", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeleteiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetAlliFolders", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolder[] GetAlliFolders() {
        object[] results = this.Invoke("GetAlliFolders", new object[0]);
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAlliFolders(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAlliFolders", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public iFolder[] EndGetAlliFolders(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolders", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolder[] GetiFolders(string UserID) {
        object[] results = this.Invoke("GetiFolders", new object[] {
                    UserID});
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolders(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolders", new object[] {
                    UserID}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolder[] EndGetiFolders(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetUserRights", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetUserRights(string iFolderID, string UserID, string Rights) {
        this.Invoke("SetUserRights", new object[] {
                    iFolderID,
                    UserID,
                    Rights});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserRights(string iFolderID, string UserID, string Rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserRights", new object[] {
                    iFolderID,
                    UserID,
                    Rights}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetUserRights(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetOwner", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser GetOwner(string iFolderID) {
        object[] results = this.Invoke("GetOwner", new object[] {
                    iFolderID});
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetOwner(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetOwner", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser EndGetOwner(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ChangeOwner", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ChangeOwner(string iFolderID, string NewOwnerUserID, string OldOwnerRights) {
        this.Invoke("ChangeOwner", new object[] {
                    iFolderID,
                    NewOwnerUserID,
                    OldOwnerRights});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeOwner(string iFolderID, string NewOwnerUserID, string OldOwnerRights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeOwner", new object[] {
                    iFolderID,
                    NewOwnerUserID,
                    OldOwnerRights}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndChangeOwner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/RemoveiFolderUser", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveiFolderUser(string iFolderID, string UserID) {
        this.Invoke("RemoveiFolderUser", new object[] {
                    iFolderID,
                    UserID});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveiFolderUser(string iFolderID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveiFolderUser", new object[] {
                    iFolderID,
                    UserID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveiFolderUser(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/RemoveSubscription", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveSubscription(string DomainID, string SubscriptionID, string UserID) {
        this.Invoke("RemoveSubscription", new object[] {
                    DomainID,
                    SubscriptionID,
                    UserID});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveSubscription(string DomainID, string SubscriptionID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveSubscription", new object[] {
                    DomainID,
                    SubscriptionID,
                    UserID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveSubscription(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderUsers", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser[] GetiFolderUsers(string iFolderID) {
        object[] results = this.Invoke("GetiFolderUsers", new object[] {
                    iFolderID});
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolderUsers(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderUsers", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser[] EndGetiFolderUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetAlliFolderUsers", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser[] GetAlliFolderUsers() {
        object[] results = this.Invoke("GetAlliFolderUsers", new object[0]);
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAlliFolderUsers(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAlliFolderUsers", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser[] EndGetAlliFolderUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SearchForiFolderUsers", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser[] SearchForiFolderUsers(string SearchString) {
        object[] results = this.Invoke("SearchForiFolderUsers", new object[] {
                    SearchString});
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchForiFolderUsers(string SearchString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchForiFolderUsers", new object[] {
                    SearchString}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser[] EndSearchForiFolderUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderUser", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser GetiFolderUser(string UserID) {
        object[] results = this.Invoke("GetiFolderUser", new object[] {
                    UserID});
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolderUser(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderUser", new object[] {
                    UserID}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser EndGetiFolderUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderUserFromiFolder", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser GetiFolderUserFromiFolder(string UserID, string iFolderID) {
        object[] results = this.Invoke("GetiFolderUserFromiFolder", new object[] {
                    UserID,
                    iFolderID});
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolderUserFromiFolder(string UserID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderUserFromiFolder", new object[] {
                    UserID,
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser EndGetiFolderUserFromiFolder(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/InviteUser", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderUser InviteUser(string iFolderID, string UserID, string Rights) {
        object[] results = this.Invoke("InviteUser", new object[] {
                    iFolderID,
                    UserID,
                    Rights});
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginInviteUser(string iFolderID, string UserID, string Rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InviteUser", new object[] {
                    iFolderID,
                    UserID,
                    Rights}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderUser EndInviteUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/AcceptiFolderInvitation", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolder AcceptiFolderInvitation(string iFolderID, string LocalPath) {
        object[] results = this.Invoke("AcceptiFolderInvitation", new object[] {
                    iFolderID,
                    LocalPath});
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAcceptiFolderInvitation(string iFolderID, string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AcceptiFolderInvitation", new object[] {
                    iFolderID,
                    LocalPath}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolder EndAcceptiFolderInvitation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetUserDiskSpace", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DiskSpace GetUserDiskSpace(string UserID) {
        object[] results = this.Invoke("GetUserDiskSpace", new object[] {
                    UserID});
        return ((DiskSpace)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserDiskSpace(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserDiskSpace", new object[] {
                    UserID}, callback, asyncState);
    }
    
    /// <remarks/>
    public DiskSpace EndGetUserDiskSpace(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DiskSpace)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderDiskSpace", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public DiskSpace GetiFolderDiskSpace(string iFolderID) {
        object[] results = this.Invoke("GetiFolderDiskSpace", new object[] {
                    iFolderID});
        return ((DiskSpace)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolderDiskSpace(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderDiskSpace", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public DiskSpace EndGetiFolderDiskSpace(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((DiskSpace)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetUserDiskSpaceLimit", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetUserDiskSpaceLimit(string UserID, long Limit) {
        this.Invoke("SetUserDiskSpaceLimit", new object[] {
                    UserID,
                    Limit});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserDiskSpaceLimit(string UserID, long Limit, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserDiskSpaceLimit", new object[] {
                    UserID,
                    Limit}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetUserDiskSpaceLimit(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetiFolderDiskSpaceLimit", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetiFolderDiskSpaceLimit(string iFolderID, long Limit) {
        this.Invoke("SetiFolderDiskSpaceLimit", new object[] {
                    iFolderID,
                    Limit});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetiFolderDiskSpaceLimit(string iFolderID, long Limit, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderDiskSpaceLimit", new object[] {
                    iFolderID,
                    Limit}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetiFolderDiskSpaceLimit(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetiFolderSyncInterval", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetiFolderSyncInterval(string iFolderID, int Interval) {
        this.Invoke("SetiFolderSyncInterval", new object[] {
                    iFolderID,
                    Interval});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetiFolderSyncInterval(string iFolderID, int Interval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderSyncInterval", new object[] {
                    iFolderID,
                    Interval}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetiFolderSyncInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetDefaultSyncInterval", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetDefaultSyncInterval(int Interval) {
        this.Invoke("SetDefaultSyncInterval", new object[] {
                    Interval});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetDefaultSyncInterval(int Interval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDefaultSyncInterval", new object[] {
                    Interval}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetDefaultSyncInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetDefaultSyncInterval", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int GetDefaultSyncInterval() {
        object[] results = this.Invoke("GetDefaultSyncInterval", new object[0]);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetDefaultSyncInterval(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultSyncInterval", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public int EndGetDefaultSyncInterval(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ConnectToEnterpriseServer", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public iFolderSettings ConnectToEnterpriseServer(string UserName, string Password, string Host) {
        object[] results = this.Invoke("ConnectToEnterpriseServer", new object[] {
                    UserName,
                    Password,
                    Host});
        return ((iFolderSettings)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConnectToEnterpriseServer(string UserName, string Password, string Host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectToEnterpriseServer", new object[] {
                    UserName,
                    Password,
                    Host}, callback, asyncState);
    }
    
    /// <remarks/>
    public iFolderSettings EndConnectToEnterpriseServer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSettings)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderConflicts", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Conflict[] GetiFolderConflicts(string iFolderID) {
        object[] results = this.Invoke("GetiFolderConflicts", new object[] {
                    iFolderID});
        return ((Conflict[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetiFolderConflicts(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderConflicts", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public Conflict[] EndGetiFolderConflicts(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Conflict[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ResolveFileConflict", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ResolveFileConflict(string iFolderID, string conflictID, bool localChangesWin) {
        this.Invoke("ResolveFileConflict", new object[] {
                    iFolderID,
                    conflictID,
                    localChangesWin});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginResolveFileConflict(string iFolderID, string conflictID, bool localChangesWin, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ResolveFileConflict", new object[] {
                    iFolderID,
                    conflictID,
                    localChangesWin}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndResolveFileConflict(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ResolveNameConflict", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ResolveNameConflict(string iFolderID, string conflictID, string newLocalName) {
        this.Invoke("ResolveNameConflict", new object[] {
                    iFolderID,
                    conflictID,
                    newLocalName});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginResolveNameConflict(string iFolderID, string conflictID, string newLocalName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ResolveNameConflict", new object[] {
                    iFolderID,
                    conflictID,
                    newLocalName}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndResolveNameConflict(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetupProxy", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetupProxy(string Host, int Port) {
        this.Invoke("SetupProxy", new object[] {
                    Host,
                    Port});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetupProxy(string Host, int Port, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetupProxy", new object[] {
                    Host,
                    Port}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetupProxy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/RemoveProxy", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveProxy() {
        this.Invoke("RemoveProxy", new object[0]);
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveProxy(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveProxy", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveProxy(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CalculateSyncSize", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public SyncSize CalculateSyncSize(string iFolderID) {
        object[] results = this.Invoke("CalculateSyncSize", new object[] {
                    iFolderID});
        return ((SyncSize)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCalculateSyncSize(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CalculateSyncSize", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public SyncSize EndCalculateSyncSize(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((SyncSize)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SynciFolderNow", RequestNamespace="http://novell.com/ifolder/web/", ResponseNamespace="http://novell.com/ifolder/web/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SynciFolderNow(string iFolderID) {
        this.Invoke("SynciFolderNow", new object[] {
                    iFolderID});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSynciFolderNow(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SynciFolderNow", new object[] {
                    iFolderID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSynciFolderNow(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
public class iFolderSettings {
    
    /// <remarks/>
    public string DefaultDomainID;
    
    /// <remarks/>
    public bool HaveEnterprise;
    
    /// <remarks/>
    public bool DisplayConfirmation;
    
    /// <remarks/>
    public string EnterpriseName;
    
    /// <remarks/>
    public string EnterpriseDescription;
    
    /// <remarks/>
    public int DefaultSyncInterval;
    
    /// <remarks/>
    public bool UseProxy;
    
    /// <remarks/>
    public string ProxyHost;
    
    /// <remarks/>
    public int ProxyPort;
    
    /// <remarks/>
    public string CurrentUserID;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
public class SyncSize {
    
    /// <remarks/>
    public System.UInt32 SyncNodeCount;
    
    /// <remarks/>
    public System.UInt64 SyncByteCount;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
public class Conflict {
    
    /// <remarks/>
    public string iFolderID;
    
    /// <remarks/>
    public string ConflictID;
    
    /// <remarks/>
    public string LocalName;
    
    /// <remarks/>
    public string LocalDate;
    
    /// <remarks/>
    public string LocalSize;
    
    /// <remarks/>
    public bool IsNameConflict;
    
    /// <remarks/>
    public string ServerName;
    
    /// <remarks/>
    public string ServerDate;
    
    /// <remarks/>
    public string ServerSize;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
public class DiskSpace {
    
    /// <remarks/>
    public long AvailableSpace;
    
    /// <remarks/>
    public long Limit;
    
    /// <remarks/>
    public long UsedSpace;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
public class iFolderUser {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string UserID;
    
    /// <remarks/>
    public string Rights;
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public string State;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/web/")]
public class iFolder {
    
    /// <remarks/>
    public string Domain;
    
    /// <remarks/>
    public string DomainIdentity;
    
    /// <remarks/>
    public string ID;
    
    /// <remarks/>
    public System.UInt64 LocalIncarnation;
    
    /// <remarks/>
    public string ManagedPath;
    
    /// <remarks/>
    public string UnManagedPath;
    
    /// <remarks/>
    public System.UInt64 MasterIncarnation;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Owner;
    
    /// <remarks/>
    public int SyncInterval;
    
    /// <remarks/>
    public bool Synchronizable;
    
    /// <remarks/>
    public string Type;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public string State;
    
    /// <remarks/>
    public bool IsSubscription;
    
    /// <remarks/>
    public int EnumeratedState;
    
    /// <remarks/>
    public bool IsWorkgroup;
    
    /// <remarks/>
    public bool HasConflicts;
    
    /// <remarks/>
    public string CurrentUserID;
}
