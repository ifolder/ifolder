/***********************************************************************
 *  $RCSfile$
 *
 *  Copyright (C) 2004 Novell, Inc.
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  Authors:
 *		Calvin Gaisford <cgaisford@novell.com>
 *		Boyd Timothy <btimothy@novell.com>
 *
 ***********************************************************************/
using System;

using Gtk;
using Gdk;
using Gnome;
using Mono.Posix;

using Simias.Client;

namespace Novell.iFolder
{
	public class Util
	{
		internal static string prefix = "@_prefix_@";
		internal static string imagesdir = "@_prefix_@/share/ifolder3/images";
		internal static string helpdir = "@_prefix_@/share/ifolder3/help";
		internal static int SectionSpacing = 20;
		internal static int SectionTitleSpacing = 5;
		internal static uint DefaultBorderWidth = 10;
		
		// The purpose of these variable is to allow us to keep track of
		// last place the user created/setup an iFolder so that we can open
		// to the same place the next time they create/setup an iFolder.
		internal static string lastSetupPath = null;
		internal static string lastCreatedPath = null;

		// Be nice and keep track of the directory where the user saves
		// the sync log.
		internal static string lastSavedSyncLogPath = null;

		internal static iFolderWindow		ifwin		= null;
		internal static LogWindow			logwin		= null;
		internal static PreferencesWindow	prefswin	= null;

		private static iFolderWebService	ifws		= null;
		private static SimiasWebService		simws		= null;

		public static void InitCatalog()
		{
			Mono.Posix.Catalog.Init("@_PACKAGE_@", "@_prefix_@/share/locale");
		}


		public static string GS(string msgid)
		{
			return Mono.Posix.Catalog.GetString(msgid);
		}


		public static string ImagesPath(string imgStr)
		{
			return string.Format("{0}/{1}", imagesdir, imgStr);
		}

		public static string HelpURL(string helpFile)
		{
			return string.Format("file://{0}/en/doc/user/data/{1}", helpdir, helpFile);
		}

		public static void OpenInBrowser(string path)
		{
			System.Diagnostics.Process process;
			process = new System.Diagnostics.Process();
			process.StartInfo.CreateNoWindow = true;
			process.StartInfo.UseShellExecute = false;
			process.StartInfo.FileName = "nautilus";
			process.StartInfo.Arguments = "\"" + path + "\"";

			try
			{
				process.Start();
				return;
			}
			catch(Exception e)
			{
			}

			process.StartInfo.FileName = "konqueror";

			try
			{
				process.Start();
				return;
			}
			catch(Exception e)
			{
			}

			throw new Exception("Unable to launch file browser");
		}

		public static void ShowHelp(string helpFile, Gtk.Window parent)
		{
			try
			{
				Gnome.Url.Show(HelpURL(helpFile));
			}
			catch(Exception e)
			{
				MessageDialog med = new MessageDialog(parent,
					DialogFlags.DestroyWithParent | DialogFlags.Modal,
					MessageType.Error,
					ButtonsType.Close,
					string.Format("Error displaying help file:{0}", e));
				med.Title = "Help file error";
				med.Run();
				med.Hide();
			}
		}

		public static void ShowAbout()
		{
			try
			{
				string[] authors = new string[]
				{
					Util.GS("iFolder 3 Team"),
					"",
					Util.GS("Developers:"),
					"  Boyd Timothy",
					"  Brady Anderson",
					"  Bruce Getter",
					"  Calvin Gaisford",
					"  Mike Lasky",
					"  Paul Thomas",
					"  Rob Lyon",
					"  Russ Young",
					"  Scott Reeves",
					"  Tim Mellor",
					"",
					Util.GS("Quality Assurance:"),
					"  Eric Ward",
					"  James Bell",
					"  Pete Mimmack",
					"  Sharon Smith",
					"  Victor Billings",
					"",
					Util.GS("Product Management:"),
					"  Jared Allen",
					"  Trent Badger",
					"",
					Util.GS("Documentation:"),
					"  Catherine Craft",
					"",
					Util.GS("Special Thanks"),
					"",
					Util.GS("Retired Contributers:"),
					"  Dale Olds",
					"  Joe Stark",
					"  Doug Eddy",
					"  Bruce Bergeson",
					"",
					Util.GS("Organizations:"),
					"  Mono Team",
					"  Novell, Inc.",
					"",
					Util.GS("Code Contributors:"),
					"  Dave Camp",
					"  Nat Friedman",
					"  Edd Dumbill",
					"  Niel M. Bornstein",
					"",
					Util.GS("Other Contributors:"),
					"  Jakub Steiner",
				};
				
				About about = new About("iFolder", "@_VERSION_@",
										Util.GS("Copyright (C) 2004-2005 Novell, Inc."),
										Util.GS("The iFolder Project is a file sharing solution that allows people to easily share folders or files of any type with other users, whether they use the same or different operating system.  This project is built on the mono/.NET framework to integrate seamlessly into existing desktop environments."),
										authors,
										null,
										null,
										new Gdk.Pixbuf(Util.ImagesPath(
											"ifolder128.png")));
				about.Show();
			}
			catch(Exception e)
			{
			}
		}
		
		public static PreferencesWindow GetPreferencesWindow()
		{
			return prefswin;
		}
		
		///
		/// Specify page = 0 to open the preferences to the General tab
		/// Specify page = 1 to open the preferences to the Accounts tab
		///
		public static void ShowPrefsPage(int page)
		{
			if (CheckWebService())
			{
				if (prefswin == null)
				{
					prefswin = new PreferencesWindow(ifws);
					
					prefswin.Destroyed +=
						new EventHandler(PrefsWinDestroyedHandler);
					prefswin.ShowAll();
					prefswin.CurrentPage = page;
				}
				else
				{
					prefswin.Present();
					prefswin.CurrentPage = page;
				}
			}
		}

		private static void PrefsWinDestroyedHandler(object o, EventArgs args)
		{
			prefswin = null;
		}
		
		public static iFolderWindow GetiFolderWindow()
		{
			return ifwin;
		}
		
		public static void ShowiFolderWindow()
		{
			if(CheckWebService())
			{
				if(ifwin == null)
				{
					ifwin = new iFolderWindow(ifws, simws);
					ifwin.Destroyed += 
							new EventHandler(OniFolderWindowDestroyed);
					ifwin.ShowAll();
				}
				else
				{
					ifwin.Present();
				}
			}
		}
		
		private static void OniFolderWindowDestroyed(object o, EventArgs args)
		{
			ifwin = null;
		}

		public static LogWindow GetLogWindow()
		{
			return logwin;
		}
		
		public static void ShowLogWindow()
		{
			if (logwin == null)
			{
				logwin = new LogWindow();
				logwin.Destroyed += 
						new EventHandler(LogWindowDestroyedHandler);
//				logwinShown = false;
				logwin.ShowAll();
			}
			else
			{
				logwin.Present();
			}
		}

		private static void LogWindowDestroyedHandler(object o, EventArgs args)
		{
			logwin = null;
		}

		private static bool CheckWebService()
		{
			if(ifws == null)
			{
				try
				{
					string localServiceUrl =
						Simias.Client.Manager.LocalServiceUrl.ToString();
					ifws = new iFolderWebService();
					ifws.Url = localServiceUrl + "/iFolder.asmx";
					LocalService.Start(ifws);
					
					simws = new SimiasWebService();
					simws.Url = localServiceUrl + "/Simias.asmx";
					LocalService.Start(simws);
					
					ifws.Ping();
				}
				catch(System.Net.WebException we)
				{
					ifws = null;

					if(we.Message == "Error: ConnectFailure")
					{
						iFolderMsgDialog mDialog = new iFolderMsgDialog(
							null,
							iFolderMsgDialog.DialogType.Error,
							iFolderMsgDialog.ButtonSet.Ok,
							"",
							Util.GS("Unable to locate the Simias process"),
							Util.GS("The Simias process must be running for iFolder to work.  Restart iFolder.  If the problem persists, please contact your network administrator for assistance."));
						mDialog.Run();
						mDialog.Hide();
						mDialog.Destroy();
						mDialog = null;
					}
					else
						throw we;
				}
				catch(Exception e)
				{
					ifws = null;

					iFolderExceptionDialog ied = new iFolderExceptionDialog(
													null, e);
					ied.Run();
					ied.Hide();
					ied.Destroy();
					ied = null;
				}
			}
			return(ifws != null);
		}

		public static void CloseiFolderWindows()
		{
			if(ifwin != null)
			{
				ifwin.Destroyed -=
					new EventHandler(OniFolderWindowDestroyed);
				ifwin.Hide();
				ifwin.Destroy();
				ifwin = null;
			}

			if(logwin != null)
			{
				logwin.Destroyed -=
					new EventHandler(LogWindowDestroyedHandler);
				logwin.Hide();
				logwin.Destroy();
				logwin = null;
			}

			if(prefswin != null)
			{
				prefswin.Destroyed -=
					new EventHandler(PrefsWinDestroyedHandler);
				prefswin.Hide();
				prefswin.Destroy();
				prefswin = null;
			}
		}
		
		public static string LastSetupPath
		{
			get
			{
				if (lastSetupPath == null)
				{
					lastSetupPath = GetDefaultUserPath();
				}

				return lastSetupPath;
			}
			set
			{
				lastSetupPath = value;
			}
		}

		public static string LastCreatedPath
		{
			get
			{
				if (lastCreatedPath == null)
				{
					lastCreatedPath = GetDefaultUserPath();
				}

				return lastCreatedPath;
			}

			/// <summary>
			/// This call expects "value" to contain the full path of
			/// the iFolder that was just created.  It will strip off
			/// the iFolder path.  For example:
			///
			///     /home/joe/ifolders/My Documents
			///
			///         will be changed to:
			///
			///     /home/joe/ifolders
			///
			/// </summary>
			set
			{
				if (value != null)
				{
					int lastSlashPos = value.LastIndexOf('/');
					if (lastSlashPos > 0)
					{
						lastCreatedPath = value.Substring(0, lastSlashPos);
					}
				}
			}
		}
		
		public static string LastSavedSyncLogPath
		{
			get
			{
				if (lastSavedSyncLogPath == null)
				{
					lastSavedSyncLogPath = GetDefaultUserPath();
				}
				
				return lastSavedSyncLogPath;
			}
			set
			{
				if (value != null)
				{
					int lastSlashPos = value.LastIndexOf('/');
					if (lastSlashPos > 0)
					{
						lastSavedSyncLogPath = value.Substring(0, lastSlashPos);
					}
				}
			}
		}

		/// <summary>
		/// Returns the path to the user's Desktop if it exists or the user's
		/// home directory if the Desktop directory is not found.
		/// </summary>
		private static string GetDefaultUserPath()
		{
			string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
			if (path == null)
				path = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
					
			return path;
		}
	}
}
