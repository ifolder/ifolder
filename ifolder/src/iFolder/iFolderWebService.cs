// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.573
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//

/// <remarks/>
/// <remarks>
///Web Service providing access to iFolder
///</remarks>
[System.Web.Services.WebServiceBinding(Name="iFolder Web ServiceSoap",Namespace="http://novell.com/ifolder/web/"),
System.Diagnostics.DebuggerStepThroughAttribute(),
System.ComponentModel.DesignerCategoryAttribute("code")]
public class iFolderWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    public iFolderWebService () {
        this.Url = "http://localhost:8086/iFolder.asmx";
    }

    /// <remarks>
    ///Allows a client to pint to make sure the Web Service is up and running
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/Ping",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void Ping() {
        this.Invoke("Ping", new object[0]);
    }

    public virtual System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Ping", new object[0], callback, asyncState);
    }

    public virtual void EndPing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Gets the current iFolder Settings
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetSettings",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderSettings GetSettings() {
        System.Object[] results = this.Invoke("GetSettings", new object[0]);
        return ((iFolderSettings)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetSettings(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSettings", new object[0], callback, asyncState);
    }

    public virtual iFolderSettings EndGetSettings(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSettings)(results[0]));
    }

    /// <remarks>
    ///Checks a LocalPath to see if it's an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/IsiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual bool IsiFolder(string LocalPath) {
        System.Object[] results = this.Invoke("IsiFolder", new object[] {
            LocalPath});
        return ((bool)(results[0]));
    }

    public virtual System.IAsyncResult BeginIsiFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsiFolder", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual bool EndIsiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Checks LocalPath to see if can be an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CanBeiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual bool CanBeiFolder(string LocalPath) {
        System.Object[] results = this.Invoke("CanBeiFolder", new object[] {
            LocalPath});
        return ((bool)(results[0]));
    }

    public virtual System.IAsyncResult BeginCanBeiFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CanBeiFolder", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual bool EndCanBeiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Checks LocalPath to see if is in an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/IsPathIniFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual bool IsPathIniFolder(string LocalPath) {
        System.Object[] results = this.Invoke("IsPathIniFolder", new object[] {
            LocalPath});
        return ((bool)(results[0]));
    }

    public virtual System.IAsyncResult BeginIsPathIniFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPathIniFolder", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual bool EndIsPathIniFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Create An iFolder. This will create an iFolder using the path specified.  The Path must exist or an exception will be thrown.
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/CreateLocaliFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolder CreateLocaliFolder(string Path) {
        System.Object[] results = this.Invoke("CreateLocaliFolder", new object[] {
            Path});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginCreateLocaliFolder(string Path, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateLocaliFolder", new object[] {
            Path}, callback, asyncState);
    }

    public virtual iFolder EndCreateLocaliFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Get An iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolder GetiFolder(string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolder", new object[] {
            iFolderID});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolder", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Get An iFolder using a LocalPath
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderByLocalPath",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolder GetiFolderByLocalPath(string LocalPath) {
        System.Object[] results = this.Invoke("GetiFolderByLocalPath", new object[] {
            LocalPath});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderByLocalPath(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderByLocalPath", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual iFolder EndGetiFolderByLocalPath(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Delete An iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/DeleteiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void DeleteiFolder(string iFolderID) {
        this.Invoke("DeleteiFolder", new object[] {
            iFolderID});
    }

    public virtual System.IAsyncResult BeginDeleteiFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteiFolder", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual void EndDeleteiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Returns all iFolders on the Server
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetAlliFolders",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolder[] GetAlliFolders() {
        System.Object[] results = this.Invoke("GetAlliFolders", new object[0]);
        return ((iFolder[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetAlliFolders(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAlliFolders", new object[0], callback, asyncState);
    }

    public virtual iFolder[] EndGetAlliFolders(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder[])(results[0]));
    }

    /// <remarks>
    ///Returns iFolders for the specified UserID
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolders",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolder[] GetiFolders(string UserID) {
        System.Object[] results = this.Invoke("GetiFolders", new object[] {
            UserID});
        return ((iFolder[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolders(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolders", new object[] {
            UserID}, callback, asyncState);
    }

    public virtual iFolder[] EndGetiFolders(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder[])(results[0]));
    }

    /// <remarks>
    ///Set the Rights of a member of an iFolder.  The Rights can be "Admin", "ReadOnly", or "ReadWrite".
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetUserRights",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void SetUserRights(string iFolderID, string UserID, string Rights) {
        this.Invoke("SetUserRights", new object[] {
            iFolderID,
            UserID,
            Rights});
    }

    public virtual System.IAsyncResult BeginSetUserRights(string iFolderID, string UserID, string Rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserRights", new object[] {
            iFolderID,
            UserID,
            Rights}, callback, asyncState);
    }

    public virtual void EndSetUserRights(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Get the Owner of an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetOwner",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderUser GetOwner(string iFolderID) {
        System.Object[] results = this.Invoke("GetOwner", new object[] {
            iFolderID});
        return ((iFolderUser)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetOwner(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetOwner", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual iFolderUser EndGetOwner(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }

    /// <remarks>
    ///Changes the owner of an iFolder and sets the rights of the previous owner to the rights specified.
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ChangeOwner",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void ChangeOwner(string iFolderID, string NewOwnerUserID, string OldOwnerRights) {
        this.Invoke("ChangeOwner", new object[] {
            iFolderID,
            NewOwnerUserID,
            OldOwnerRights});
    }

    public virtual System.IAsyncResult BeginChangeOwner(string iFolderID, string NewOwnerUserID, string OldOwnerRights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeOwner", new object[] {
            iFolderID,
            NewOwnerUserID,
            OldOwnerRights}, callback, asyncState);
    }

    public virtual void EndChangeOwner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Remove a single member from an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/RemoveiFolderUser",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void RemoveiFolderUser(string iFolderID, string UserID) {
        this.Invoke("RemoveiFolderUser", new object[] {
            iFolderID,
            UserID});
    }

    public virtual System.IAsyncResult BeginRemoveiFolderUser(string iFolderID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveiFolderUser", new object[] {
            iFolderID,
            UserID}, callback, asyncState);
    }

    public virtual void EndRemoveiFolderUser(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Get the list of iFolder Members
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderUsers",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderUser[] GetiFolderUsers(string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolderUsers", new object[] {
            iFolderID});
        return ((iFolderUser[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderUsers(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderUsers", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual iFolderUser[] EndGetiFolderUsers(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser[])(results[0]));
    }

    /// <remarks>
    ///Get the list of All Members
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetAlliFolderUsers",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderUser[] GetAlliFolderUsers() {
        System.Object[] results = this.Invoke("GetAlliFolderUsers", new object[0]);
        return ((iFolderUser[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetAlliFolderUsers(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAlliFolderUsers", new object[0], callback, asyncState);
    }

    public virtual iFolderUser[] EndGetAlliFolderUsers(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser[])(results[0]));
    }

    /// <remarks>
    ///Lookup a single member to a collection
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderUser",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderUser GetiFolderUser(string UserID) {
        System.Object[] results = this.Invoke("GetiFolderUser", new object[] {
            UserID});
        return ((iFolderUser)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderUser(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderUser", new object[] {
            UserID}, callback, asyncState);
    }

    public virtual iFolderUser EndGetiFolderUser(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }

    /// <remarks>
    ///Lookup a single member to a collection
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderUserFromiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderUser GetiFolderUserFromiFolder(string UserID, string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolderUserFromiFolder", new object[] {
            UserID,
            iFolderID});
        return ((iFolderUser)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderUserFromiFolder(string UserID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderUserFromiFolder", new object[] {
            UserID,
            iFolderID}, callback, asyncState);
    }

    public virtual iFolderUser EndGetiFolderUserFromiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }

    /// <remarks>
    ///Invite a user to an iFolder.  This call will only work with Enterprise iFolders
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/InviteUser",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderUser InviteUser(string iFolderID, string UserID, string Rights) {
        System.Object[] results = this.Invoke("InviteUser", new object[] {
            iFolderID,
            UserID,
            Rights});
        return ((iFolderUser)(results[0]));
    }

    public virtual System.IAsyncResult BeginInviteUser(string iFolderID, string UserID, string Rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("InviteUser", new object[] {
            iFolderID,
            UserID,
            Rights}, callback, asyncState);
    }

    public virtual iFolderUser EndInviteUser(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderUser)(results[0]));
    }

    /// <remarks>
    ///Accept an invitation fo an iFolder.  The iFolder ID represents a Subscription object
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/AcceptiFolderInvitation",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolder AcceptiFolderInvitation(string iFolderID, string LocalPath) {
        System.Object[] results = this.Invoke("AcceptiFolderInvitation", new object[] {
            iFolderID,
            LocalPath});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginAcceptiFolderInvitation(string iFolderID, string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AcceptiFolderInvitation", new object[] {
            iFolderID,
            LocalPath}, callback, asyncState);
    }

    public virtual iFolder EndAcceptiFolderInvitation(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Gets the DiskSpaceQuota for a member
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetUserDiskSpace",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual DiskSpace GetUserDiskSpace(string UserID) {
        System.Object[] results = this.Invoke("GetUserDiskSpace", new object[] {
            UserID});
        return ((DiskSpace)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetUserDiskSpace(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserDiskSpace", new object[] {
            UserID}, callback, asyncState);
    }

    public virtual DiskSpace EndGetUserDiskSpace(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((DiskSpace)(results[0]));
    }

    /// <remarks>
    ///Gets the DiskSpaceQuota for an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetiFolderDiskSpace",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual DiskSpace GetiFolderDiskSpace(string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolderDiskSpace", new object[] {
            iFolderID});
        return ((DiskSpace)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderDiskSpace(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderDiskSpace", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual DiskSpace EndGetiFolderDiskSpace(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((DiskSpace)(results[0]));
    }

    /// <remarks>
    ///Sets the Disk Space Limit for a user
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetUserDiskSpaceLimit",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void SetUserDiskSpaceLimit(string UserID, long Limit) {
        this.Invoke("SetUserDiskSpaceLimit", new object[] {
            UserID,
            Limit});
    }

    public virtual System.IAsyncResult BeginSetUserDiskSpaceLimit(string UserID, long Limit, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserDiskSpaceLimit", new object[] {
            UserID,
            Limit}, callback, asyncState);
    }

    public virtual void EndSetUserDiskSpaceLimit(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Sets the Sync Interval for an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetiFolderSyncInterval",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void SetiFolderSyncInterval(string iFolderID, int Interval) {
        this.Invoke("SetiFolderSyncInterval", new object[] {
            iFolderID,
            Interval});
    }

    public virtual System.IAsyncResult BeginSetiFolderSyncInterval(string iFolderID, int Interval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderSyncInterval", new object[] {
            iFolderID,
            Interval}, callback, asyncState);
    }

    public virtual void EndSetiFolderSyncInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Sets the Default Sync Interval
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/SetDefaultSyncInterval",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual void SetDefaultSyncInterval(int Interval) {
        this.Invoke("SetDefaultSyncInterval", new object[] {
            Interval});
    }

    public virtual System.IAsyncResult BeginSetDefaultSyncInterval(int Interval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDefaultSyncInterval", new object[] {
            Interval}, callback, asyncState);
    }

    public virtual void EndSetDefaultSyncInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Gets the Default Sync Interval
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/GetDefaultSyncInterval",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual int GetDefaultSyncInterval() {
        System.Object[] results = this.Invoke("GetDefaultSyncInterval", new object[0]);
        return ((int)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetDefaultSyncInterval(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultSyncInterval", new object[0], callback, asyncState);
    }

    public virtual int EndGetDefaultSyncInterval(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks>
    ///Connects to an iFolder Enterprise Server
    ///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/web/ConnectToEnterpriseServer",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/",ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped,Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public virtual iFolderSettings ConnectToEnterpriseServer(string UserName, string Password, string Host) {
        System.Object[] results = this.Invoke("ConnectToEnterpriseServer", new object[] {
            UserName,
            Password,
            Host});
        return ((iFolderSettings)(results[0]));
    }

    public virtual System.IAsyncResult BeginConnectToEnterpriseServer(string UserName, string Password, string Host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectToEnterpriseServer", new object[] {
            UserName,
            Password,
            Host}, callback, asyncState);
    }

    public virtual iFolderSettings EndConnectToEnterpriseServer(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolderSettings)(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/web/")]
public class iFolderSettings {

    /// <remarks/>
    public string DefaultDomainID;

    /// <remarks/>
    public bool HaveEnterprise;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/web/")]
public class iFolder {

    /// <remarks/>
    public string Domain;

    /// <remarks/>
    public string DomainIdentity;

    /// <remarks/>
    public string ID;

    /// <remarks/>
    public ulong LocalIncarnation;

    /// <remarks/>
    public string ManagedPath;

    /// <remarks/>
    public string UnManagedPath;

    /// <remarks/>
    public ulong MasterIncarnation;

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string Owner;

    /// <remarks/>
    public int SyncInterval;

    /// <remarks/>
    public bool Synchronizable;

    /// <remarks/>
    public string Type;

    /// <remarks/>
    public string Description;

    /// <remarks/>
    public string State;

    /// <remarks/>
    public bool IsSubscription;

    /// <remarks/>
    public int EnumeratedState;

    /// <remarks/>
    public bool IsWorkgroup;

    /// <remarks/>
    public bool HasCollisions;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/web/")]
public class iFolderUser {

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string UserID;

    /// <remarks/>
    public string Rights;

    /// <remarks/>
    public bool IsOwner;

    /// <remarks/>
    public string ID;

    /// <remarks/>
    public bool IsSubscription;
}

/// <remarks/>
[System.Xml.Serialization.XmlType(Namespace="http://novell.com/ifolder/web/")]
public class DiskSpace {

    /// <remarks/>
    public long AvailableSpace;

    /// <remarks/>
    public long Limit;

    /// <remarks/>
    public long UsedSpace;
}

