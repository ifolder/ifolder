// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.573
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------


/// <remarks/>
/// <remarks>
///Web Service providing access to iFolder
///</remarks>
[System.Web.Services.WebServiceBinding(Name="iFolder Web ServiceSoap",Namespace="http://novell.com/ifolder/web/"),
System.Diagnostics.DebuggerStepThroughAttribute(),
System.ComponentModel.DesignerCategoryAttribute("code")]
public class iFolderWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    public iFolderWebService () {
        this.Url = "http://localhost:8086/iFolder.asmx";
    }

    /// <remarks>
    ///Allows a client to pint to make sure the Web Service is up and running
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/Ping",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void Ping() {
        this.Invoke("Ping", new object[0]);
    }

    public virtual System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Ping", new object[0], callback, asyncState);
    }

    public virtual void EndPing(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Gets the current iFolder Settings
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetSettings",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Settings GetSettings() {
        System.Object[] results = this.Invoke("GetSettings", new object[0]);
        return ((Settings)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetSettings(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSettings", new object[0], callback, asyncState);
    }

    public virtual Settings EndGetSettings(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Settings)(results[0]));
    }

    /// <remarks>
    ///Checks a LocalPath to see if it's an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/IsiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual bool IsiFolder(string LocalPath) {
        System.Object[] results = this.Invoke("IsiFolder", new object[] {
            LocalPath});
        return ((bool)(results[0]));
    }

    public virtual System.IAsyncResult BeginIsiFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsiFolder", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual bool EndIsiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Checks LocalPath to see if can be an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/CanBeiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual bool CanBeiFolder(string LocalPath) {
        System.Object[] results = this.Invoke("CanBeiFolder", new object[] {
            LocalPath});
        return ((bool)(results[0]));
    }

    public virtual System.IAsyncResult BeginCanBeiFolder(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CanBeiFolder", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual bool EndCanBeiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Checks LocalPath to see if is in an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/IsPathInCollection",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual bool IsPathInCollection(string LocalPath) {
        System.Object[] results = this.Invoke("IsPathInCollection", new object[] {
            LocalPath});
        return ((bool)(results[0]));
    }

    public virtual System.IAsyncResult BeginIsPathInCollection(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPathInCollection", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual bool EndIsPathInCollection(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }

    /// <remarks>
    ///Create An iFolder. This will create an iFolder using the path specified.  The Path must exist or an exception will be thrown.
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/CreateLocaliFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual iFolder CreateLocaliFolder(string Path) {
        System.Object[] results = this.Invoke("CreateLocaliFolder", new object[] {
            Path});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginCreateLocaliFolder(string Path, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateLocaliFolder", new object[] {
            Path}, callback, asyncState);
    }

    public virtual iFolder EndCreateLocaliFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Get An iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual iFolder GetiFolder(string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolder", new object[] {
            iFolderID});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolder", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual iFolder EndGetiFolder(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Get An iFolder using a LocalPath
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetiFolderByLocalPath",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual iFolder GetiFolderByLocalPath(string LocalPath) {
        System.Object[] results = this.Invoke("GetiFolderByLocalPath", new object[] {
            LocalPath});
        return ((iFolder)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderByLocalPath(string LocalPath, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderByLocalPath", new object[] {
            LocalPath}, callback, asyncState);
    }

    public virtual iFolder EndGetiFolderByLocalPath(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder)(results[0]));
    }

    /// <remarks>
    ///Delete An iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/DeleteiFolder",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void DeleteiFolder(string iFolderID) {
        this.Invoke("DeleteiFolder", new object[] {
            iFolderID});
    }

    public virtual System.IAsyncResult BeginDeleteiFolder(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteiFolder", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual void EndDeleteiFolder(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Returns all iFolders on the Server
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetAlliFolders",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual iFolder[] GetAlliFolders() {
        System.Object[] results = this.Invoke("GetAlliFolders", new object[0]);
        return ((iFolder[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetAlliFolders(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAlliFolders", new object[0], callback, asyncState);
    }

    public virtual iFolder[] EndGetAlliFolders(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder[])(results[0]));
    }

    /// <remarks>
    ///Returns iFolders for the specified UserID
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetiFolders",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual iFolder[] GetiFolders(string UserID) {
        System.Object[] results = this.Invoke("GetiFolders", new object[] {
            UserID});
        return ((iFolder[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolders(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolders", new object[] {
            UserID}, callback, asyncState);
    }

    public virtual iFolder[] EndGetiFolders(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((iFolder[])(results[0]));
    }

    /// <remarks>
    ///Set the Rights of a member of an iFolder.  The Rights can be "Admin", "ReadOnly", or "ReadWrite".
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/SetMemberRights",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void SetMemberRights(string iFolderID, string UserID, string Rights) {
        this.Invoke("SetMemberRights", new object[] {
            iFolderID,
            UserID,
            Rights});
    }

    public virtual System.IAsyncResult BeginSetMemberRights(string iFolderID, string UserID, string Rights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetMemberRights", new object[] {
            iFolderID,
            UserID,
            Rights}, callback, asyncState);
    }

    public virtual void EndSetMemberRights(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Get the Owner of an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetOwner",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Member GetOwner(string iFolderID) {
        System.Object[] results = this.Invoke("GetOwner", new object[] {
            iFolderID});
        return ((Member)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetOwner(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetOwner", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual Member EndGetOwner(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Member)(results[0]));
    }

    /// <remarks>
    ///Changes the owner of an iFolder and sets the rights of the previous owner to the rights specified.
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/ChangeOwner",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void ChangeOwner(string iFolderID, string NewOwnerUserID, string OldOwnerRights) {
        this.Invoke("ChangeOwner", new object[] {
            iFolderID,
            NewOwnerUserID,
            OldOwnerRights});
    }

    public virtual System.IAsyncResult BeginChangeOwner(string iFolderID, string NewOwnerUserID, string OldOwnerRights, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeOwner", new object[] {
            iFolderID,
            NewOwnerUserID,
            OldOwnerRights}, callback, asyncState);
    }

    public virtual void EndChangeOwner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Remove a single member from an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/RemoveMember",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void RemoveMember(string iFolderID, string UserID) {
        this.Invoke("RemoveMember", new object[] {
            iFolderID,
            UserID});
    }

    public virtual System.IAsyncResult BeginRemoveMember(string iFolderID, string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveMember", new object[] {
            iFolderID,
            UserID}, callback, asyncState);
    }

    public virtual void EndRemoveMember(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Get the list of iFolder Members
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetMembers",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Member[] GetMembers(string iFolderID) {
        System.Object[] results = this.Invoke("GetMembers", new object[] {
            iFolderID});
        return ((Member[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetMembers(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMembers", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual Member[] EndGetMembers(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Member[])(results[0]));
    }

    /// <remarks>
    ///Get the list of All Members
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetAllMembers",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Member[] GetAllMembers() {
        System.Object[] results = this.Invoke("GetAllMembers", new object[0]);
        return ((Member[])(results[0]));
    }

    public virtual System.IAsyncResult BeginGetAllMembers(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllMembers", new object[0], callback, asyncState);
    }

    public virtual Member[] EndGetAllMembers(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Member[])(results[0]));
    }

    /// <remarks>
    ///Lookup a single member to a collection
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetMember",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Member GetMember(string UserID) {
        System.Object[] results = this.Invoke("GetMember", new object[] {
            UserID});
        return ((Member)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetMember(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMember", new object[] {
            UserID}, callback, asyncState);
    }

    public virtual Member EndGetMember(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Member)(results[0]));
    }

    /// <remarks>
    ///Lookup a single member to a collection
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetiFolderMember",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Member GetiFolderMember(string UserID, string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolderMember", new object[] {
            UserID,
            iFolderID});
        return ((Member)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderMember(string UserID, string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderMember", new object[] {
            UserID,
            iFolderID}, callback, asyncState);
    }

    public virtual Member EndGetiFolderMember(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Member)(results[0]));
    }

    /// <remarks>
    ///Gets the DiskSpaceQuota for a member
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetMemberDiskSpaceQuota",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual DiskSpaceQuota GetMemberDiskSpaceQuota(string UserID) {
        System.Object[] results = this.Invoke("GetMemberDiskSpaceQuota", new object[] {
            UserID});
        return ((DiskSpaceQuota)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetMemberDiskSpaceQuota(string UserID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetMemberDiskSpaceQuota", new object[] {
            UserID}, callback, asyncState);
    }

    public virtual DiskSpaceQuota EndGetMemberDiskSpaceQuota(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((DiskSpaceQuota)(results[0]));
    }

    /// <remarks>
    ///Gets the DiskSpaceQuota for an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetiFolderDiskSpaceQuota",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual DiskSpaceQuota GetiFolderDiskSpaceQuota(string iFolderID) {
        System.Object[] results = this.Invoke("GetiFolderDiskSpaceQuota", new object[] {
            iFolderID});
        return ((DiskSpaceQuota)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetiFolderDiskSpaceQuota(string iFolderID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetiFolderDiskSpaceQuota", new object[] {
            iFolderID}, callback, asyncState);
    }

    public virtual DiskSpaceQuota EndGetiFolderDiskSpaceQuota(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((DiskSpaceQuota)(results[0]));
    }

    /// <remarks>
    ///Sets the Disk Space Limit for a user
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/SetMemberSpaceLimit",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void SetMemberSpaceLimit(string UserID, long Limit) {
        this.Invoke("SetMemberSpaceLimit", new object[] {
            UserID,
            Limit});
    }

    public virtual System.IAsyncResult BeginSetMemberSpaceLimit(string UserID, long Limit, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetMemberSpaceLimit", new object[] {
            UserID,
            Limit}, callback, asyncState);
    }

    public virtual void EndSetMemberSpaceLimit(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Sets the Sync Interval for an iFolder
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/SetiFolderSyncInterval",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void SetiFolderSyncInterval(string iFolderID, int Interval) {
        this.Invoke("SetiFolderSyncInterval", new object[] {
            iFolderID,
            Interval});
    }

    public virtual System.IAsyncResult BeginSetiFolderSyncInterval(string iFolderID, int Interval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetiFolderSyncInterval", new object[] {
            iFolderID,
            Interval}, callback, asyncState);
    }

    public virtual void EndSetiFolderSyncInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Sets the Default Sync Interval
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/SetDefaultSyncInterval",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual void SetDefaultSyncInterval(int Interval) {
        this.Invoke("SetDefaultSyncInterval", new object[] {
            Interval});
    }

    public virtual System.IAsyncResult BeginSetDefaultSyncInterval(int Interval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetDefaultSyncInterval", new object[] {
            Interval}, callback, asyncState);
    }

    public virtual void EndSetDefaultSyncInterval(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }

    /// <remarks>
    ///Gets the Default Sync Interval
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/GetDefaultSyncInterval",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual int GetDefaultSyncInterval() {
        System.Object[] results = this.Invoke("GetDefaultSyncInterval", new object[0]);
        return ((int)(results[0]));
    }

    public virtual System.IAsyncResult BeginGetDefaultSyncInterval(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDefaultSyncInterval", new object[0], callback, asyncState);
    }

    public virtual int EndGetDefaultSyncInterval(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks>
    ///Connects to an iFolder Enterprise Server
    ///</remarks>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://novell.com/ifolder/web/encodedTypes/ConnectToEnterpriseServer",RequestNamespace="http://novell.com/ifolder/web/",ResponseNamespace="http://novell.com/ifolder/web/")]
    public virtual Settings ConnectToEnterpriseServer(string UserName, string Password, string Host) {
        System.Object[] results = this.Invoke("ConnectToEnterpriseServer", new object[] {
            UserName,
            Password,
            Host});
        return ((Settings)(results[0]));
    }

    public virtual System.IAsyncResult BeginConnectToEnterpriseServer(string UserName, string Password, string Host, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectToEnterpriseServer", new object[] {
            UserName,
            Password,
            Host}, callback, asyncState);
    }

    public virtual Settings EndConnectToEnterpriseServer(System.IAsyncResult asyncResult) {
        System.Object[] results = this.EndInvoke(asyncResult);
        return ((Settings)(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.SoapType(Namespace="http://novell.com/ifolder/web/encodedTypes")]
public class Settings {

    /// <remarks/>
    public string DefaultDomainID;

    /// <remarks/>
    public bool HaveEnterprise;
}

/// <remarks/>
[System.Xml.Serialization.SoapType("iFolder",Namespace="http://novell.com/ifolder/web/encodedTypes")]
public class iFolder {

    /// <remarks/>
    public string Domain;

    /// <remarks/>
    public string DomainIdentity;

    /// <remarks/>
    public string ID;

    /// <remarks/>
    public ulong LocalIncarnation;

    /// <remarks/>
    public string ManagedPath;

    /// <remarks/>
    public string UnManagedPath;

    /// <remarks/>
    public ulong MasterIncarnation;

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string Owner;

    /// <remarks/>
    public int SyncInterval;

    /// <remarks/>
    public bool Synchronizable;

    /// <remarks/>
    public string Type;

    /// <remarks/>
    public string Description;
}

/// <remarks/>
[System.Xml.Serialization.SoapType("Member",Namespace="http://novell.com/ifolder/web/encodedTypes")]
public class Member {

    /// <remarks/>
    public string Name;

    /// <remarks/>
    public string UserID;

    /// <remarks/>
    public string Rights;

    /// <remarks/>
    public bool IsOwner;
}

/// <remarks/>
[System.Xml.Serialization.SoapType("DiskSpaceQuota",Namespace="http://novell.com/ifolder/web/encodedTypes")]
public class DiskSpaceQuota {

    /// <remarks/>
    public long AvailableSpace;

    /// <remarks/>
    public long Limit;

    /// <remarks/>
    public long UsedSpace;
}

