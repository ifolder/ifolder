
DISTRIBUTION NOTES

To install gSOAP, unpack the archive. You will get the following files:

README.txt	read this first
NOTES.txt	this file
changelog.html	changes
license.html	gSOAP public license (HTML)
license.pdf	gSOAP public license (PDF)
gpl.txt		GPL license
soapcpp2	executable gSOAP 2 compiler
wsdl2h		executable gSOAP WSDL parser
soapdoc2.html	documentation (HTML)
soapdoc2.pdf	documentation (PDF)
stdsoap2.h	header file for stdsoap2.c[pp]
stdsoap2.c	library and gSOAP runtime
stdsoap2.cpp	library (identical to stdsoap2.c)
dom.html	gSOAP DOM parser (HTML)
dom.pdf		gSOAP DOM parser (PDF)
dom.h		header file for dom.c
dom.c		C DOM parser
dom++.h		header file for dom++.cpp
dom++.cpp	C++ DOM parser
stl.h		STL extensions (combines the .h files below)
stldeque.h	STL deque interface
stllist.h	STL list interface
stlvector.h	STL vector interface
stlset.h	STL set interface
typemap.dat	XML schema to C/C++ type mapper for WSDL parser
xml.h		File imported by .h files generated by the WSDL parser

and the following subdirectories:
src		gSOAP compiler sources
samples		examples
extras		(contributed) extras
wsdl		WSDL parser sources

If any of the above files is missing, please contact us: contact@genivia.com

Examples are included in the 'samples' subdirectory. The examples are:

calc.h calcclient.c calcserver.c:	 Simple calculator client and server
ck.h ckclient.cpp ckserver.cpp:		 Cookie client and server example
dime.h dimeclt.cpp dimesrv.cpp:		 Client and image server using DIME
factory.h factory.cpp			 Remote object factory and simple ORB
factorytest.h factorytest.cpp		 Test client for remote object factory
googleapi.h googleapi.c			 Google Web API client
listing.h listing.cpp:			 XMethod service listing client
localtime.h localtime.c:		 Get localtime DOC/LIT client example
lu.h lumat.cpp luclient.cpp luserver.cpp:Linear solver example client+server
magic.h magicclient.cpp magicserver.cpp: Magic Squares client and server
magic.h mtmagicserver.cpp:		 Multi-threaded Magic Squares server
mybubble.h mybubble.c:			 MyBubble client
oneliners:				 Directory with one-line services
polymorph.h polymorph.cpp:		 Polymorphic object exchange
quote.h quote.c				 Get delayed stock quote
quote2.h quote2.c			 Get delayed stock quote (SOAP messages)
quote3.h quote3.cpp			 Get delayed stock quote (Stock class)
quote4.h quote4.cpp			 Get delayed stock quote using XML DOM
quotex.h quotex.cpp:			 Combined client/server example
ssl.h sslclient.c sslserver.c:		 SSL example (requires OpenSSL)
uddi.h uddi.cpp:			 UDDI client
varparam.h varparam.cpp:		 Variable polymorphic parameters example
webserver:				 Stand-alone Web server

To build the example services and clients, type "make" in the 'samples'
directory (Sun Solaris users should type "make -f MakefileSolaris"). See
also http://www.cs.fsu.edu/~engelen/soapexamples.html
for details and explanations for some of these examples.

For Windows users, the archive includes 'magic_VC' and 'quote_VC' Visual
Studio projects in the 'samples' directory.

For Mac users, the archive includes a 'quote_MAC_ProjBuild' Project Builder
example in the 'samples' directory.

To try the SSL-secure SOAP server, install OpenSSL and change the occurrences
of "linprog2.cs.fsu.edu" in sslclient.c and sslserver.c to the machine name
(or machine IP) you are using. Example .pem files are included but you need to
create your own .pem files (see OpenSSL documentation).

The sslclient and sslserver codes can then be build as follows:

soapcpp2 -c ssl.h
gcc -DWITH_OPENSSL -o sslclient sslclient.c stdsoap2.c soapC.c soapClient.c -lssl -lcrypto
gcc -DWITH_OPENSSL -o sslserver sslserver.c stdsoap2.c soapC.c soapServer.c -lssl -lcrypto -lpthread

DISCLAIMER: WE TRY OUR BEST TO PROVIDE YOU WITH "REAL-WORLD" EXAMPLES BUT WE
CANNOT GUARANTEE THAT ALL CLIENT EXAMPLES CAN CONNECT TO THIRD PARTY WEB
SERVICES WHEN THESE SERVICES ARE DOWN OR HAVE BEEN REMOVED.

The 'wsdlcpp' directory contains the WSDL importer. The importer converts WSDL
files to .h files.

Contributions are included in the 'extras' directory:

GSoapWinInet.h and GSoapWinInet.cpp:
Allows gsoap to use the WinInet API instead of calls to the socket API. The
primary benefit of this arrangement is that "if IE works, your program will
work". There is no need to read proxy settings from the registry, deal with
proxy configuration scripts, etc. Changes in the "Internet Options" dialog box
will immediately take effect in your program. Additionally, this will allow
gsoap to handle forms of authentication not yet supported natively, such as
NTLM (Integrated Windows Authentication), etc.

ckdb.h ckdb.c:
HTTP cookie database load and store operations for persistant cookie support.
Cookies are saved in XML format using gSOAP's serializers.

ckdbtest.h ckdbtest.c:
Test client program for cookie database.

soapdefs.h logging.cpp:
C++ message logging with streams.

plugin.h plugin.c:
Example plugin. Enables customized message logging.
