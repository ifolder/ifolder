/***********************************************************************
 *  $RCSfile$
 *
 *  Copyright (C) 2004 Novell, Inc.
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  Author: Rob
 *
 ***********************************************************************/

using System;
using System.IO;
using System.Reflection;

namespace Simias.Client
{
	/// <summary>
	/// Simias Setup Information
	/// </summary>
	public class SimiasSetup
	{
		// setup paths
		private static string _prefix = "@prefix@";
		private static string _bindir = "@bindir@";
		private static string _datadir = "@datadir@";
		private static string _includedir = "@includedir@";
		private static string _infodir = "@infodir@";
		private static string _libexecdir = "@libexecdir@";
		private static string _libdir = "@libdir@";
		private static string _localstatedir = "@localstatedir@";
		private static string _mandir = "@mandir@";
		private static string _sbindir = "@sbindir@";
		private static string _sharedstatedir = "@sharedstatedir@";
		private static string _sysconfdir = "@sysconfdir@";

		// custom setup paths
		private static string _webdir = "@webdir@";
		private static string _webbindir = "@webbindir@";
		
		// setup info
		private static string _target = "@target@";

		/// <summary>
		/// Static Constructor
		/// </summary>
		static SimiasSetup()
		{
			// note: with DotNet with the entry assembly directory as the prefix
			if (MyEnvironment.DotNet)
			{
				string newprefix = null;
				
				try
				{
					// location of the entry assembly as the prefix
					newprefix = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
				}
				catch
				{
					// ignore
				}
				
				if ((newprefix == null) || (newprefix.Length == 0))
				{
					newprefix = Environment.CurrentDirectory;
				}

				// assign
				prefix = newprefix;
			}
		}

		/// <summary>
		/// Private Constructor
		/// </summary>
		private SimiasSetup()
		{
		}
		
		/// <summary>
		/// prefix
		/// </summary>
		public static string prefix
		{
			get { return _prefix; }
			
			set
			{
				// On some Windows clients, the initial prefix path is C:\ which causes
				// a malformed path to be returned by Replace ... removing the trailing separator
				// will fix this.
				_prefix = _prefix.Trim(Path.DirectorySeparatorChar);
				
				// replace the old prefix
				_bindir = Path.GetFullPath(_bindir.Replace(_prefix, value));
				_datadir = Path.GetFullPath(_datadir.Replace(_prefix, value));
				_includedir = Path.GetFullPath(_includedir.Replace(_prefix, value));
				_infodir = Path.GetFullPath(_infodir.Replace(_prefix, value));
				_libexecdir = Path.GetFullPath(_libexecdir.Replace(_prefix, value));
				_libdir = Path.GetFullPath(_libdir.Replace(_prefix, value));
				_localstatedir = Path.GetFullPath(_localstatedir.Replace(_prefix, value));
				_mandir = Path.GetFullPath(_mandir.Replace(_prefix, value));
				_sbindir = Path.GetFullPath(_sbindir.Replace(_prefix, value));
				_sharedstatedir = Path.GetFullPath(_sharedstatedir.Replace(_prefix, value));
				_sysconfdir = Path.GetFullPath(_sysconfdir.Replace(_prefix, value));
				_webdir = Path.GetFullPath(_webdir.Replace(_prefix, value));
				_webbindir = Path.GetFullPath(_webbindir.Replace(_prefix, value));
				
				// update prefix
				_prefix = Path.GetFullPath(value);
			}
		}
		
		/// <summary>
		/// bindir
		/// </summary>
		public static string bindir
		{
			get { return _bindir; }
		}
		
		/// <summary>
		/// datadir
		/// </summary>
		public static string datadir
		{
			get { return _datadir; }
		}
		
		/// <summary>
		/// includedir
		/// </summary>
		public static string includedir
		{
			get { return _includedir; }
		}
		
		/// <summary>
		/// infodir
		/// </summary>
		public static string infodir
		{
			get { return _infodir; }
		}
		
		/// <summary>
		/// libexecdir
		/// </summary>
		public static string libexecdir
		{
			get { return _libexecdir; }
		}
		
		/// <summary>
		/// libdir
		/// </summary>
		public static string libdir
		{
			get { return _libdir; }
		}
		
		/// <summary>
		/// localstatedir
		/// </summary>
		public static string localstatedir
		{
			get { return _localstatedir; }
		}
		
		/// <summary>
		/// mandir
		/// </summary>
		public static string mandir
		{
			get { return _mandir; }
		}
		
		/// <summary>
		/// sbindir
		/// </summary>
		public static string sbindir
		{
			get { return _sbindir; }
		}
		
		/// <summary>
		/// sharedstatedir
		/// </summary>
		public static string sharedstatedir
		{
			get { return _sharedstatedir; }
		}
		
		/// <summary>
		/// sysconfdir
		/// </summary>
		public static string sysconfdir
		{
			get { return _sysconfdir; }
		}
		
		/// <summary>
		/// webdir
		/// </summary>
		public static string webdir
		{
			get { return _webdir; }
		}
		
		/// <summary>
		/// webbindir
		/// </summary>
		public static string webbindir
		{
			get { return _webbindir; }
		}
		
		/// <summary>
		/// target
		/// </summary>
		public static string target
		{
			get { return _target; }
		}
	}
}
