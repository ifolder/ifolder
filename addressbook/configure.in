AC_INIT(src/FormsBookLib/BooksContacts.cs)

PASSALONG_CONFIG_OPTIONS=$*

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(addressbook, 0.7)
VERSION=$VERSION.`date +%Y%m%d`
AM_MAINTAINER_MODE

#
# Check for a valid C# compiler
#
AC_CHECK_PROG(CSC, csc, csc)
test -z "$CSC" && AC_CHECK_PROG(CSC, mcs, mcs)
test -z "$CSC" && AC_MSG_ERROR([no acceptable C Sharp compiler found in \$PATH])

case $CSC in
    #
    # Mono-specific configuration
    #
    mcs)
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:MONO /warn:4 /d:TRACE'
        CSCFLAGS_DEBUG="/debug+ /d:DEBUG"
        CSCFLAGS_OPTIMIZE="/optimize+"
        MONO=mono
        MONO_DEBUG='mono --debug'
        MONO_PATH='$(subst $(SPACE),:,$(addprefix $(SRCDIR)$(SEP),$(COMMON_SUBDIRS))):$(SIMIAS_INSTALL_PATH)/bin'
        SYSTEM_XML='System.Xml.dll'
    ;;
    #
    # .NET-specific configuration
    #
    csc)
        CSC_EXEFLAG=/target:exe
        CSC_LIBFLAG=/target:library
        CSC_WINEXEFLAG=/target:winexe
        CSCFLAGS='/d:DOTNET /warn:4 /d:TRACE /nologo'
        CSCFLAGS_DEBUG="/debug+ /d:DEBUG"
        CSCFLAGS_OPTIMIZE="/optimize+"
        MONO=
        MONO_DEBUG=
        MONO_PATH=
        SYSTEM_XML='System.XML.dll'
    ;;
esac
AC_SUBST(CSC)
AC_SUBST(CSC_EXEFLAG)
AC_SUBST(CSC_LIBFLAG)
AC_SUBST(CSC_WINEXEFLAG)
AC_SUBST(CSCFLAGS)
AC_SUBST(MONO)
AC_SUBST(MONO_PATH)
AC_SUBST(SYSTEM_XML)

SRCDIR='$(top_srcdir)/src'
TOOLDIR='$(top_srcdir)/tools'
DOCDIR="$SRCDIR/doc"

AC_SUBST(SRCDIR)
AC_SUBST(TOOLDIR)
AC_SUBST(DOCDIR)

EMPTY=
SPACE='$(EMPTY) $(EMPTY)'

AC_SUBST(EMPTY)
AC_SUBST(SPACE)

COMMON_SUBDIRS=
LINUX_SUBDIRS="GtkAddrBook"
WINDOWS_SUBDIRS="FormsBookLib FormsAddrBook"

AC_SUBST(COMMON_SUBDIRS)
AC_SUBST(LINUX_SUBDIRS)
AC_SUBST(WINDOWS_SUBDIRS)

#
# Check for a valid operating system
#
case $host_os in
    linux*)
        ADDRESSBOOK_OS='linux'
    ;;
    cygwin*)
        ADDRESSBOOK_OS='windows'
    ;;
    *)
        AC_MSG_ERROR([Unknown host_os: $host_os])
    ;;
esac
AC_SUBST(ADDRESSBOOK_OS)
AM_CONDITIONAL(LINUX, test "$ADDRESSBOOK_OS" = "linux")
AM_CONDITIONAL(WINDOWS, test "$ADDRESSBOOK_OS" = "windows")
        
#
# Set platform-specific variables
#
case $ADDRESSBOOK_OS in
    #
    # Linux-specific configuration
    #
    linux)
        #
        # Set variables
        #
        COMMON_CLEAN_FILES='.cstore .simias'
        ICON_EXT='.ico'
        ICON_FLAG='/resource:'
        NUNIT="$TOOLDIR/NUnit/bin/nunit-console.exe"
        NUNIT_LIBPATH="$TOOLDIR/NUnit/bin"
        NUNIT_FLAGS='/nologo'
        NUNITFLAGS_DEBUG=''
        NUNITFLAGS_OPTIMIZE=''
        PLATFORM_SUBDIRS=$LINUX_SUBDIRS
        REPORT_DIR='$(DESTDIR)$(bindir)'
        REPORT_EXE='mono $(top_srcdir)/tools/Report/Report.exe'
        SEP='/'
        SQLITELIB="libsqlite.so"
        SQLITELIB_PATH="../../external/sqlite/linux"
    ;;
    #
    # Windows-specific configuration
    #
    windows)
        COMMON_CLEAN_FILES='*.suo */*.suo *.csproj.user */*.csproj.user bin obj */bin */obj *.xml */*.xml *.pdb */*.pdb .cstore .simias'
        ICON_EXT='.ico'
        ICON_FLAG='/win32icon:'
        NUNIT="$TOOLDIR/NUnit/bin/nunit-console.exe"
        NUNIT_LIBPATH='$(shell cygpath --windows "$TOOLDIR/NUnit/bin")'
        NUNIT_FLAGS='/nologo'
        NUNITFLAGS_DEBUG=''
        NUNITFLAGS_OPTIMIZE=''
        PLATFORM_SUBDIRS=$WINDOWS_SUBDIRS
        REPORT_DIR='$(shell cygpath --windows $(DESTDIR)$(bindir) | sed ''s,\\\\,/,g'')'
        REPORT_EXE='$(top_srcdir)/tools/Report/Report.exe'
        SEP='$(EMPTY)\\$(EMPTY)'
        SQLITELIB="sqlite.dll"
        SQLITELIB_PATH="../../external/sqlite/w32"
    ;;
esac
AC_SUBST(COMMON_CLEAN_FILES)
AC_SUBST(ICON_EXT)
AC_SUBST(ICON_FLAG)
AC_SUBST(NUNIT)
AC_SUBST(NUNIT_FLAGS)
AC_SUBST(NUNIT_LIBPATH)
AC_SUBST(PLATFORM_SUBDIRS)
AC_SUBST(REPORT_DIR)
AC_SUBST(REPORT_EXE)
AC_SUBST(SEP)
AC_SUBST(SQLITELIB)
AC_SUBST(SQLITELIB_PATH)

#
# Run standard macros
#
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_HEADER_STDC
#AM_PROG_LIBTOOL

#
# Handle --with-simias-install-path
#
AC_ARG_WITH(simias-install-path, [
  --with-simias-install-path=DIR
                          path to where Simias is installed [[PREFIX]]],
    [ SIMIAS_INSTALL_PATH=$withval ],
    [ SIMIAS_INSTALL_PATH=$prefix ]
    )
test "x$SIMIAS_INSTALL_PATH" = xNONE && SIMIAS_INSTALL_PATH=$ac_default_prefix
mkdir -p $SIMIAS_INSTALL_PATH || AC_MSG_ERROR([mkdir -p $SIMIAS_INSTALL_PATH failed])
SIMIAS_INSTALL_PATH=`cd $SIMIAS_INSTALL_PATH && pwd`
case $ADDRESSBOOK_OS in
    windows)
        SIMIAS_INSTALL_PATH=`cygpath --windows $SIMIAS_INSTALL_PATH | sed 's,\\\\,/,g'`
    ;;
esac
echo SIMIAS_INSTALL_PATH=$SIMIAS_INSTALL_PATH
AC_SUBST(SIMIAS_INSTALL_PATH)

#
# Handle --with-simias-build-path
#
AC_ARG_WITH(simias-build-path, [
  --with-simias-build-path=DIR
                          path to a Simias build [[NONE]]],
    [ SIMIAS_BUILD_PATH=$withval ],
    [ SIMIAS_BUILD_PATH=NONE ]
    )
if test "x$SIMIAS_BUILD_PATH" = xNONE; then
    SIMIAS_BUILD_PATH=''
else
    test -d $SIMIAS_BUILD_PATH || AC_MSG_ERROR([$SIMIAS_BUILD_PATH does not exist])
    SIMIAS_BUILD_PATH=`cd $SIMIAS_BUILD_PATH && pwd`
    case $ADDRESSBOOK_OS in
        windows)
            SIMIAS_BUILD_PATH=`cygpath --windows $SIMIAS_BUILD_PATH | sed 's,\\\\,/,g'`
        ;;
    esac
fi
echo SIMIAS_BUILD_PATH=$SIMIAS_BUILD_PATH
AC_SUBST(SIMIAS_BUILD_PATH)

DISTCHECK_CONFIGURE_FLAGS="--with-simias-install-path=$SIMIAS_INSTALL_PATH"
AC_SUBST(DISTCHECK_CONFIGURE_FLAGS)


#
# Handle --with-ndoc-path
#
AC_ARG_WITH(ndoc-path, [
  --with-ndoc-path=PATH        path to dir that contains NDocConsole.exe [[NONE]]],
    [ NDOC_PATH="$withval" ],
    [ NDOC_PATH=NONE ]
    )
if test "$NDOC_PATH" = "NONE"; then
    NDOC_PATH=''
else
    if test `basename "$NDOC_PATH"` = "NDocConsole.exe"; then
        NDOC_PATH=`dirname "$NDOC_PATH"`
    fi
    test -d "$NDOC_PATH" || AC_MSG_ERROR([$NDOC_PATH does not exist])
    NDOC_PATH=`cd "$NDOC_PATH" && pwd`
fi
if test -n "$NDOC_PATH"; then
    if test -e "$NDOC_PATH/NDocConsole.exe"; then
        NDOC_CMD="$NDOC_PATH/NDocConsole.exe"
    fi
    test -e "$NDOC_CMD" || AC_MSG_ERROR([NDocConsole.exe not found in $NDOC_PATH])
fi
echo NDOC_CMD=$NDOC_CMD
AC_SUBST(NDOC_CMD)
AM_CONDITIONAL(NDOC, test -n "$NDOC_CMD")

#
# Handle --enable-debug
#
AC_ARG_ENABLE(debug, [
  --enable-debug          configure the Makefiles to build in DEBUG mode],
    [case "${enableval}" in
        yes) enable_debug=true ;;
        no)  enable_debug=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
    esac],[enable_debug=false])
AM_CONDITIONAL(DEBUG, test x$enable_debug = xtrue)
if test "$enable_debug" = "true"
then
  # Build debug version.
  CFLAGS="$CFLAGS_DEBUG $CFLAGS"
  CSCFLAGS="$CSCFLAGS_DEBUG $CSCFLAGS"
  CXXFLAGS="$CXXFLAGS_DEBUG $CXXFLAGS"
  DEVENV_CONFIGURATION=Debug
  MONO=$MONO_DEBUG
  NUNIT_FLAGS="$NUNITFLAGS_DEBUG $NUNIT_FLAGS"
else
  # Build optimized version.
  CFLAGS="$CFLAGS_OPTIMIZE $CFLAGS"
  CSCFLAGS="$CSCFLAGS_OPTIMIZE $CSCFLAGS"
  CXXFLAGS="$CXXFLAGS_OPTIMIZE $CXXFLAGS"
  DEVENV_CONFIGURATION=Release
  NUNIT_FLAGS="$NUNITFLAGS_OPTIMIZE $NUNIT_FLAGS"
fi
AC_SUBST(CSCFLAGS)
AC_SUBST(DEVENV_CONFIGURATION)

#
# Configure PKG_CONFIG
#
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
    AC_MSG_ERROR([You need to install pkg-config])
fi
case $ADDRESSBOOK_OS in
    linux)
        GTK_SHARP_REQUIRED_VERSION=0.10
        PKG_CHECK_MODULES(BASE_DEPENDENCIES, gtk-sharp >= $GTK_SHARP_REQUIRED_VERSION)
    ;;
esac

#
# We handle the --prefix and --with-simias-{build|install}-path options
# so we remove them and pass all other configuration options on to any subproject
# we configure.
#
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--prefix=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's,--prefix=[[^ ]][[^ ]]* *,,'`
fi
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--with-simias-build-path=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's/--with-simias-build-path=[[^ ]][[^ ]]* *//'`
fi
if expr "$PASSALONG_CONFIG_OPTIONS" : '.*--with-simias-install-path=[[^ ]][[^ ]]* *' > /dev/null; then
    PASSALONG_CONFIG_OPTIONS=`echo "$PASSALONG_CONFIG_OPTIONS" | sed 's/--with-simias-install-path=[[^ ]][[^ ]]* *//'`
fi
echo PASSALONG_CONFIG_OPTIONS="$PASSALONG_CONFIG_OPTIONS"

#
# Configure Simias subproject, if specified.
#
if test -n "$SIMIAS_BUILD_PATH"; then
    CONFIG_OPTIONS="$PASSALONG_CONFIG_OPTIONS"
    if test -n "$SIMIAS_INSTALL_PATH"; then
        CONFIG_OPTIONS="--prefix=$SIMIAS_INSTALL_PATH ${CONFIG_OPTIONS}"
    else
        test "x$prefix" != xNONE &&
            CONFIG_OPTIONS="--prefix=${prefix} ${CONFIG_OPTIONS}"
    fi
    if test -x "$SIMIAS_BUILD_PATH/configure"; then
        CONFIG_CMD="./configure"
    else
        CONFIG_CMD="./autogen.sh"
    fi
    CONFIG_CMD="$CONFIG_CMD $CONFIG_OPTIONS"
    echo "----------------------------------------------------------------------"
    echo "cd $SIMIAS_BUILD_PATH; $CONFIG_CMD"
    (cd $SIMIAS_BUILD_PATH; eval $CONFIG_CMD)
    echo "----------------------------------------------------------------------"
    SUBPROJECT_BUILD_PATHS="$SIMIAS_BUILD_PATH"
    echo "continuing configure in `pwd`"
fi
AC_SUBST(SUBPROJECT_BUILD_PATHS)
AM_CONDITIONAL(BUILD_SUBPROJECTS, test -n "$SUBPROJECT_BUILD_PATHS")

#
# Configure files
#
AC_OUTPUT([
Makefile
src/Makefile
src/FormsBookLib/Makefile
src/FormsAddrBook/Makefile
src/GtkAddrBook/Makefile
package/Makefile
package/windows/Makefile
package/linux/Makefile
package/linux/addressbook.spec
doc/Makefile
])
