//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.2032.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;

namespace iFolderClient
{

	/// <remarks/>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name="iFolderWebSoap", Namespace="http://novell.com/ifolder/webservice/")]
	public class iFolderWeb : System.Web.Services.Protocols.SoapHttpClientProtocol 
	{
    
		/// <remarks/>
		public iFolderWeb() 
		{
			this.Url = "http://rlyon4.provo.novell.com/simias10/iFolderWeb.asmx";
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetServer", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderServer GetServer() 
		{
			object[] results = this.Invoke("GetServer", new object[0]);
			return ((iFolderServer)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetServer(System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetServer", new object[0], callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderServer EndGetServer(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderServer)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetSystem", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderSystem GetSystem() 
		{
			object[] results = this.Invoke("GetSystem", new object[0]);
			return ((iFolderSystem)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetSystem(System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetSystem", new object[0], callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderSystem EndGetSystem(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderSystem)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolder CreateiFolder(string name, string description) 
		{
			object[] results = this.Invoke("CreateiFolder", new object[] {
																			 name,
																			 description});
			return ((iFolder)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginCreateiFolder(string name, string description, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("CreateiFolder", new object[] {
																	  name,
																	  description}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolder EndCreateiFolder(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolder)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void DeleteiFolder(string ifolderID) 
		{
			this.Invoke("DeleteiFolder", new object[] {
														  ifolderID});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginDeleteiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("DeleteiFolder", new object[] {
																	  ifolderID}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndDeleteiFolder(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolder GetiFolder(string ifolderID) 
		{
			object[] results = this.Invoke("GetiFolder", new object[] {
																		  ifolderID});
			return ((iFolder)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetiFolder(string ifolderID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetiFolder", new object[] {
																   ifolderID}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolder EndGetiFolder(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolder)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderDetails", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderDetails GetiFolderDetails(string ifolderID) 
		{
			object[] results = this.Invoke("GetiFolderDetails", new object[] {
																				 ifolderID});
			return ((iFolderDetails)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetiFolderDetails(string ifolderID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetiFolderDetails", new object[] {
																		  ifolderID}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderDetails EndGetiFolderDetails(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderDetails)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderDescription", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void SetiFolderDescription(string ifolderID, string description) 
		{
			this.Invoke("SetiFolderDescription", new object[] {
																  ifolderID,
																  description});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginSetiFolderDescription(string ifolderID, string description, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("SetiFolderDescription", new object[] {
																			  ifolderID,
																			  description}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndSetiFolderDescription(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolders", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolder[] GetiFolders(int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetiFolders", new object[] {
																		   index,
																		   count});
			total = ((int)(results[1]));
			return ((iFolder[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetiFolders(int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetiFolders", new object[] {
																	index,
																	count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolder[] EndGetiFolders(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolder[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFolderByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolder GetiFolderByName(string ifolderName) 
		{
			object[] results = this.Invoke("GetiFolderByName", new object[] {
																				ifolderName});
			return ((iFolder)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetiFolderByName(string ifolderName, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetiFolderByName", new object[] {
																		 ifolderName}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolder EndGetiFolderByName(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolder)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetiFoldersByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolder[] GetiFoldersByName(SearchOperation operation, string pattern, int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetiFoldersByName", new object[] {
																				 operation,
																				 pattern,
																				 index,
																				 count});
			total = ((int)(results[1]));
			return ((iFolder[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetiFoldersByName(SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetiFoldersByName", new object[] {
																		  operation,
																		  pattern,
																		  index,
																		  count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolder[] EndGetiFoldersByName(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolder[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/PublishiFolder", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void PublishiFolder(string ifolder, bool publish) 
		{
			this.Invoke("PublishiFolder", new object[] {
														   ifolder,
														   publish});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginPublishiFolder(string ifolder, bool publish, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("PublishiFolder", new object[] {
																	   ifolder,
																	   publish}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndPublishiFolder(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAuthenticatedUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderUser GetAuthenticatedUser() 
		{
			object[] results = this.Invoke("GetAuthenticatedUser", new object[0]);
			return ((iFolderUser)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetAuthenticatedUser(System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetAuthenticatedUser", new object[0], callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderUser EndGetAuthenticatedUser(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderUser)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUser", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderUser GetUser(string userID) 
		{
			object[] results = this.Invoke("GetUser", new object[] {
																	   userID});
			return ((iFolderUser)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetUser(string userID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetUser", new object[] {
																userID}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderUser EndGetUser(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderUser)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetMembers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderUser[] GetMembers(string ifolderID, int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetMembers", new object[] {
																		  ifolderID,
																		  index,
																		  count});
			total = ((int)(results[1]));
			return ((iFolderUser[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetMembers(string ifolderID, int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetMembers", new object[] {
																   ifolderID,
																   index,
																   count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderUser[] EndGetMembers(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolderUser[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetMemberRights", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void SetMemberRights(string ifolderID, string userID, Rights rights) 
		{
			this.Invoke("SetMemberRights", new object[] {
															ifolderID,
															userID,
															rights});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginSetMemberRights(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("SetMemberRights", new object[] {
																		ifolderID,
																		userID,
																		rights}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndSetMemberRights(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/AddMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void AddMember(string ifolderID, string userID, Rights rights) 
		{
			this.Invoke("AddMember", new object[] {
													  ifolderID,
													  userID,
													  rights});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginAddMember(string ifolderID, string userID, Rights rights, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("AddMember", new object[] {
																  ifolderID,
																  userID,
																  rights}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndAddMember(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/RemoveMember", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void RemoveMember(string ifolderID, string userID) 
		{
			this.Invoke("RemoveMember", new object[] {
														 ifolderID,
														 userID});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginRemoveMember(string ifolderID, string userID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("RemoveMember", new object[] {
																	 ifolderID,
																	 userID}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndRemoveMember(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/SetiFolderOwner", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void SetiFolderOwner(string ifolderID, string userID) 
		{
			this.Invoke("SetiFolderOwner", new object[] {
															ifolderID,
															userID});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginSetiFolderOwner(string ifolderID, string userID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("SetiFolderOwner", new object[] {
																		ifolderID,
																		userID}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndSetiFolderOwner(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsers", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderUser[] GetUsers(int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetUsers", new object[] {
																		index,
																		count});
			total = ((int)(results[1]));
			return ((iFolderUser[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetUsers(int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetUsers", new object[] {
																 index,
																 count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderUser[] EndGetUsers(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolderUser[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetUsersBySearch", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderUser[] GetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetUsersBySearch", new object[] {
																				property,
																				operation,
																				pattern,
																				index,
																				count});
			total = ((int)(results[1]));
			return ((iFolderUser[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetUsersBySearch(SearchProperty property, SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetUsersBySearch", new object[] {
																		 property,
																		 operation,
																		 pattern,
																		 index,
																		 count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderUser[] EndGetUsersBySearch(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolderUser[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetAuthenticatedUserPolicy", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserPolicy GetAuthenticatedUserPolicy() 
		{
			object[] results = this.Invoke("GetAuthenticatedUserPolicy", new object[0]);
			return ((UserPolicy)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetAuthenticatedUserPolicy(System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetAuthenticatedUserPolicy", new object[0], callback, asyncState);
		}
    
		/// <remarks/>
		public UserPolicy EndGetAuthenticatedUserPolicy(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserPolicy)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CreateEntry", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderEntry CreateEntry(string ifolderID, string parentID, iFolderEntryType type, string entryName) 
		{
			object[] results = this.Invoke("CreateEntry", new object[] {
																		   ifolderID,
																		   parentID,
																		   type,
																		   entryName});
			return ((iFolderEntry)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginCreateEntry(string ifolderID, string parentID, iFolderEntryType type, string entryName, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("CreateEntry", new object[] {
																	ifolderID,
																	parentID,
																	type,
																	entryName}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderEntry EndCreateEntry(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderEntry)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/DeleteEntry", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void DeleteEntry(string ifolderID, string entryID) 
		{
			this.Invoke("DeleteEntry", new object[] {
														ifolderID,
														entryID});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginDeleteEntry(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("DeleteEntry", new object[] {
																	ifolderID,
																	entryID}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndDeleteEntry(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntry", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderEntry GetEntry(string ifolderID, string entryID) 
		{
			object[] results = this.Invoke("GetEntry", new object[] {
																		ifolderID,
																		entryID});
			return ((iFolderEntry)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetEntry(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetEntry", new object[] {
																 ifolderID,
																 entryID}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderEntry EndGetEntry(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderEntry)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntryByPath", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderEntry GetEntryByPath(string ifolderID, string entryPath) 
		{
			object[] results = this.Invoke("GetEntryByPath", new object[] {
																			  ifolderID,
																			  entryPath});
			return ((iFolderEntry)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetEntryByPath(string ifolderID, string entryPath, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetEntryByPath", new object[] {
																	   ifolderID,
																	   entryPath}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderEntry EndGetEntryByPath(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((iFolderEntry)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntries", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderEntry[] GetEntries(string ifolderID, string entryID, int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetEntries", new object[] {
																		  ifolderID,
																		  entryID,
																		  index,
																		  count});
			total = ((int)(results[1]));
			return ((iFolderEntry[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetEntries(string ifolderID, string entryID, int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetEntries", new object[] {
																   ifolderID,
																   entryID,
																   index,
																   count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderEntry[] EndGetEntries(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolderEntry[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetEntriesByName", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public iFolderEntry[] GetEntriesByName(string ifolderID, string parentID, SearchOperation operation, string pattern, int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetEntriesByName", new object[] {
																				ifolderID,
																				parentID,
																				operation,
																				pattern,
																				index,
																				count});
			total = ((int)(results[1]));
			return ((iFolderEntry[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetEntriesByName(string ifolderID, string parentID, SearchOperation operation, string pattern, int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetEntriesByName", new object[] {
																		 ifolderID,
																		 parentID,
																		 operation,
																		 pattern,
																		 index,
																		 count}, callback, asyncState);
		}
    
		/// <remarks/>
		public iFolderEntry[] EndGetEntriesByName(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((iFolderEntry[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/GetChanges", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ChangeEntry[] GetChanges(string ifolderID, string entryID, int index, int count, out int total) 
		{
			object[] results = this.Invoke("GetChanges", new object[] {
																		  ifolderID,
																		  entryID,
																		  index,
																		  count});
			total = ((int)(results[1]));
			return ((ChangeEntry[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginGetChanges(string ifolderID, string entryID, int index, int count, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetChanges", new object[] {
																   ifolderID,
																   entryID,
																   index,
																   count}, callback, asyncState);
		}
    
		/// <remarks/>
		public ChangeEntry[] EndGetChanges(System.IAsyncResult asyncResult, out int total) 
		{
			object[] results = this.EndInvoke(asyncResult);
			total = ((int)(results[1]));
			return ((ChangeEntry[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/OpenFileRead", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string OpenFileRead(string ifolderID, string entryID) 
		{
			object[] results = this.Invoke("OpenFileRead", new object[] {
																			ifolderID,
																			entryID});
			return ((string)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginOpenFileRead(string ifolderID, string entryID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("OpenFileRead", new object[] {
																	 ifolderID,
																	 entryID}, callback, asyncState);
		}
    
		/// <remarks/>
		public string EndOpenFileRead(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/OpenFileWrite", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string OpenFileWrite(string ifolderID, string entryID, long length) 
		{
			object[] results = this.Invoke("OpenFileWrite", new object[] {
																			 ifolderID,
																			 entryID,
																			 length});
			return ((string)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginOpenFileWrite(string ifolderID, string entryID, long length, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("OpenFileWrite", new object[] {
																	  ifolderID,
																	  entryID,
																	  length}, callback, asyncState);
		}
    
		/// <remarks/>
		public string EndOpenFileWrite(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/ReadFile", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		[return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
		public System.Byte[] ReadFile(string fileID, int size) 
		{
			object[] results = this.Invoke("ReadFile", new object[] {
																		fileID,
																		size});
			return ((System.Byte[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginReadFile(string fileID, int size, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("ReadFile", new object[] {
																 fileID,
																 size}, callback, asyncState);
		}
    
		/// <remarks/>
		public System.Byte[] EndReadFile(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Byte[])(results[0]));
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/WriteFile", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void WriteFile(string fileID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] buffer) 
		{
			this.Invoke("WriteFile", new object[] {
													  fileID,
													  buffer});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginWriteFile(string fileID, System.Byte[] buffer, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("WriteFile", new object[] {
																  fileID,
																  buffer}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndWriteFile(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
    
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://novell.com/ifolder/webservice/CloseFile", RequestNamespace="http://novell.com/ifolder/webservice/", ResponseNamespace="http://novell.com/ifolder/webservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void CloseFile(string fileID) 
		{
			this.Invoke("CloseFile", new object[] {
													  fileID});
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginCloseFile(string fileID, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("CloseFile", new object[] {
																  fileID}, callback, asyncState);
		}
    
		/// <remarks/>
		public void EndCloseFile(System.IAsyncResult asyncResult) 
		{
			this.EndInvoke(asyncResult);
		}
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class iFolderServer 
	{
    
		/// <remarks/>
		public string Version;
    
		/// <remarks/>
		public string HostName;
    
		/// <remarks/>
		public string MachineName;
    
		/// <remarks/>
		public string OSVersion;
    
		/// <remarks/>
		public string UserName;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class ChangeEntry 
	{
    
		/// <remarks/>
		public System.DateTime Time;
    
		/// <remarks/>
		public ChangeType Type;
    
		/// <remarks/>
		public string EntryID;
    
		/// <remarks/>
		public string EntryName;
    
		/// <remarks/>
		public string UserID;
    
		/// <remarks/>
		public string UserFullName;
    
		/// <remarks/>
		public bool IsDirectory;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public enum ChangeType 
	{
    
		/// <remarks/>
		Add,
    
		/// <remarks/>
		Modify,
    
		/// <remarks/>
		Delete,
    
		/// <remarks/>
		Unknown,
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class iFolderEntry 
	{
    
		/// <remarks/>
		public string ID;
    
		/// <remarks/>
		public string Name;
    
		/// <remarks/>
		public string Path;
    
		/// <remarks/>
		public string iFolderID;
    
		/// <remarks/>
		public string ParentID;
    
		/// <remarks/>
		public bool IsDirectory;
    
		/// <remarks/>
		public bool IsRoot;
    
		/// <remarks/>
		public bool HasChildren;
    
		/// <remarks/>
		public System.DateTime LastModified;
    
		/// <remarks/>
		public long Size;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class UserPolicy 
	{
    
		/// <remarks/>
		public string UserID;
    
		/// <remarks/>
		public bool LoginEnabled;
    
		/// <remarks/>
		public long SpaceLimit;
    
		/// <remarks/>
		public long SpaceLimitEffective;
    
		/// <remarks/>
		public long FileSizeLimit;
    
		/// <remarks/>
		public long FileSizeLimitEffective;
    
		/// <remarks/>
		public long SpaceUsed;
    
		/// <remarks/>
		public long SpaceAvailable;
    
		/// <remarks/>
		public int SyncInterval;
    
		/// <remarks/>
		public int SyncIntervalEffective;
    
		/// <remarks/>
		public string[] FileTypesIncludes;
    
		/// <remarks/>
		public string[] FileTypesIncludesEffective;
    
		/// <remarks/>
		public string[] FileTypesExcludes;
    
		/// <remarks/>
		public string[] FileTypesExcludesEffective;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class iFolderUser 
	{
    
		/// <remarks/>
		public string ID;
    
		/// <remarks/>
		public string UserName;
    
		/// <remarks/>
		public string FullName;
    
		/// <remarks/>
		public Rights Rights;
    
		/// <remarks/>
		public bool Enabled;
    
		/// <remarks/>
		public bool IsOwner;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public enum Rights 
	{
    
		/// <remarks/>
		Deny,
    
		/// <remarks/>
		ReadOnly,
    
		/// <remarks/>
		ReadWrite,
    
		/// <remarks/>
		Admin,
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	[System.Xml.Serialization.XmlIncludeAttribute(typeof(iFolderDetails))]
	public class iFolder 
	{
    
		/// <remarks/>
		public string ID;
    
		/// <remarks/>
		public string Name;
    
		/// <remarks/>
		public string Description;
    
		/// <remarks/>
		public string OwnerID;
    
		/// <remarks/>
		public string OwnerUserName;
    
		/// <remarks/>
		public string OwnerFullName;
    
		/// <remarks/>
		public string DomainID;
    
		/// <remarks/>
		public long Size;
    
		/// <remarks/>
		public Rights Rights;
    
		/// <remarks/>
		public System.DateTime LastModified;
    
		/// <remarks/>
		public bool Published;
    
		/// <remarks/>
		public bool Enabled;
    
		/// <remarks/>
		public int MemberCount;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class iFolderDetails : iFolder 
	{
    
		/// <remarks/>
		public int FileCount;
    
		/// <remarks/>
		public int DirectoryCount;
    
		/// <remarks/>
		public string ManagedPath;
    
		/// <remarks/>
		public string UnManagedPath;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public class iFolderSystem 
	{
    
		/// <remarks/>
		public string ID;
    
		/// <remarks/>
		public string Name;
    
		/// <remarks/>
		public string Version;
    
		/// <remarks/>
		public string Description;
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public enum SearchOperation 
	{
    
		/// <remarks/>
		BeginsWith,
    
		/// <remarks/>
		EndsWith,
    
		/// <remarks/>
		Contains,
    
		/// <remarks/>
		Equals,
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public enum SearchProperty 
	{
    
		/// <remarks/>
		UserName,
    
		/// <remarks/>
		Name,
    
		/// <remarks/>
		LastName,
    
		/// <remarks/>
		FirstName,
	}

	/// <remarks/>
	[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://novell.com/ifolder/webservice/")]
	public enum iFolderEntryType 
	{
    
		/// <remarks/>
		Directory,
    
		/// <remarks/>
		File,
	}
}